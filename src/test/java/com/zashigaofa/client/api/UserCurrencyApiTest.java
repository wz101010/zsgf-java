/*
 * 用户全部 API 文档
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.zashigaofa.client.api;

import com.zashigaofa.client.ApiException;
import com.zashigaofa.client.model.BooleanApiResponse;
import com.zashigaofa.client.model.CurrencyConsumeRequest;
import com.zashigaofa.client.model.ExchangeCurrencyRequest;
import java.time.OffsetDateTime;
import com.zashigaofa.client.model.RechargePointRequest;
import com.zashigaofa.client.model.UserCurrencyCurrencyTransResultApiResponse;
import com.zashigaofa.client.model.UserCurrencyListApiResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for UserCurrencyApi
 */
@Disabled
public class UserCurrencyApiTest {

    private final UserCurrencyApi api = new UserCurrencyApi();

    
    /**
     * 获取用户资产
     *
     * 根据用户ID获取用户的资产列表
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userCurrenciesTest() throws ApiException {
        Long id = null;
        String appKey = null;
        UserCurrencyListApiResponse response = 
        api.userCurrencies(id, appKey);
        
        // TODO: test validations
    }
    
    /**
     * 消费虚拟币
     *
     * 根据提供的参数进行虚拟币消费
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userCurrencyConsumeTest() throws ApiException {
        String nonce = null;
        Long timestamp = null;
        String signature = null;
        String appKey = null;
        CurrencyConsumeRequest currencyConsumeRequest = null;
        BooleanApiResponse response = 
        api.userCurrencyConsume(nonce, timestamp, signature, appKey, currencyConsumeRequest);
        
        // TODO: test validations
    }
    
    /**
     * 兑换虚拟币
     *
     * 根据提供的参数进行虚拟币兑换
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userCurrencyExchangeTest() throws ApiException {
        String nonce = null;
        Long timestamp = null;
        String signature = null;
        String appKey = null;
        ExchangeCurrencyRequest exchangeCurrencyRequest = null;
        BooleanApiResponse response = 
        api.userCurrencyExchange(nonce, timestamp, signature, appKey, exchangeCurrencyRequest);
        
        // TODO: test validations
    }
    
    /**
     * 充值虚拟币
     *
     * 根据提供的参数进行虚拟币充值
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userCurrencyRechargeTest() throws ApiException {
        String nonce = null;
        Long timestamp = null;
        String signature = null;
        String appKey = null;
        RechargePointRequest rechargePointRequest = null;
        BooleanApiResponse response = 
        api.userCurrencyRecharge(nonce, timestamp, signature, appKey, rechargePointRequest);
        
        // TODO: test validations
    }
    
    /**
     * 虚拟币交易记录
     *
     * 根据提供的参数获取虚拟币交易记录
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userCurrencyTransactionsTest() throws ApiException {
        String appKey = null;
        String transType = null;
        String curCode = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        Integer skip = null;
        Integer take = null;
        UserCurrencyCurrencyTransResultApiResponse response = 
        api.userCurrencyTransactions(appKey, transType, curCode, startTime, endTime, skip, take);
        
        // TODO: test validations
    }
    
}
