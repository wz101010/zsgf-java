/*
 * 用户全部 API 文档
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.zashigaofa.client.api;

import com.zashigaofa.client.ApiException;
import com.zashigaofa.client.model.AppUserResetEmailRequest;
import com.zashigaofa.client.model.AppUserResetPhoneRequest;
import com.zashigaofa.client.model.AppUserResetPwdRequest;
import com.zashigaofa.client.model.BooleanApiResponse;
import com.zashigaofa.client.model.EmailSignInRequest;
import com.zashigaofa.client.model.EmailSignUpRequest;
import com.zashigaofa.client.model.PhoneSignInRequest;
import com.zashigaofa.client.model.PhoneSignUpRequest;
import com.zashigaofa.client.model.SendEmailCodeRequest;
import com.zashigaofa.client.model.SendSMSCodeRequest;
import com.zashigaofa.client.model.SetupCodeApiResponse;
import com.zashigaofa.client.model.SignInRequest;
import com.zashigaofa.client.model.SignUpRequest;
import com.zashigaofa.client.model.TokenModelApiResponse;
import com.zashigaofa.client.model.UnionIDSignInRequest;
import com.zashigaofa.client.model.UnionIDSignUpRequest;
import com.zashigaofa.client.model.UpdateProfileRequest;
import com.zashigaofa.client.model.UserProfileResultApiResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for UserApi
 */
@Disabled
public class UserApiTest {

    private final UserApi api = new UserApi();

    
    /**
     * 注销账号
     *
     * 清除用户所有附属数据，并注销账号
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userDeactivateHardTest() throws ApiException {
        String appKey = null;
        BooleanApiResponse response = 
        api.userDeactivateHard(appKey);
        
        // TODO: test validations
    }
    
    /**
     * 邮箱登录
     *
     * 使用邮箱进行登录
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userEmailSignInTest() throws ApiException {
        String appKey = null;
        EmailSignInRequest emailSignInRequest = null;
        TokenModelApiResponse response = 
        api.userEmailSignIn(appKey, emailSignInRequest);
        
        // TODO: test validations
    }
    
    /**
     * 邮箱注册
     *
     * 使用邮箱进行注册
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userEmailSignUpTest() throws ApiException {
        String appKey = null;
        EmailSignUpRequest emailSignUpRequest = null;
        TokenModelApiResponse response = 
        api.userEmailSignUp(appKey, emailSignUpRequest);
        
        // TODO: test validations
    }
    
    /**
     * 手机登录
     *
     * 使用手机号码进行登录
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userPhoneSignInTest() throws ApiException {
        String appKey = null;
        PhoneSignInRequest phoneSignInRequest = null;
        TokenModelApiResponse response = 
        api.userPhoneSignIn(appKey, phoneSignInRequest);
        
        // TODO: test validations
    }
    
    /**
     * 手机注册
     *
     * 使用手机号码进行注册
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userPhoneSignUpTest() throws ApiException {
        String appKey = null;
        PhoneSignUpRequest phoneSignUpRequest = null;
        TokenModelApiResponse response = 
        api.userPhoneSignUp(appKey, phoneSignUpRequest);
        
        // TODO: test validations
    }
    
    /**
     * 获取个人资料
     *
     * 获取当前用户的个人资料
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userProfileTest() throws ApiException {
        String appKey = null;
        UserProfileResultApiResponse response = 
        api.userProfile(appKey);
        
        // TODO: test validations
    }
    
    /**
     * 重置邮箱
     *
     * 通过邮箱验证码重置邮箱
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userResetEmailTest() throws ApiException {
        String appKey = null;
        AppUserResetEmailRequest appUserResetEmailRequest = null;
        BooleanApiResponse response = 
        api.userResetEmail(appKey, appUserResetEmailRequest);
        
        // TODO: test validations
    }
    
    /**
     * 重置手机号
     *
     * 通过手机号验证码重置手机号
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userResetPhoneTest() throws ApiException {
        String appKey = null;
        AppUserResetPhoneRequest appUserResetPhoneRequest = null;
        BooleanApiResponse response = 
        api.userResetPhone(appKey, appUserResetPhoneRequest);
        
        // TODO: test validations
    }
    
    /**
     * 重置密码
     *
     * 通过手机号或邮箱重置密码
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userResetPwdTest() throws ApiException {
        String appKey = null;
        AppUserResetPwdRequest appUserResetPwdRequest = null;
        BooleanApiResponse response = 
        api.userResetPwd(appKey, appUserResetPwdRequest);
        
        // TODO: test validations
    }
    
    /**
     * 发送邮箱验证码
     *
     * 发送邮箱验证码用于注册或找回密码
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userSendEmailCodeTest() throws ApiException {
        String appKey = null;
        SendEmailCodeRequest sendEmailCodeRequest = null;
        BooleanApiResponse response = 
        api.userSendEmailCode(appKey, sendEmailCodeRequest);
        
        // TODO: test validations
    }
    
    /**
     * 发送手机验证码
     *
     * 发送手机验证码用于注册或找回密码
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userSendSMSCodeTest() throws ApiException {
        String appKey = null;
        SendSMSCodeRequest sendSMSCodeRequest = null;
        BooleanApiResponse response = 
        api.userSendSMSCode(appKey, sendSMSCodeRequest);
        
        // TODO: test validations
    }
    
    /**
     * 密码登录
     *
     * 使用账号密码进行登录
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userSignInTest() throws ApiException {
        String appKey = null;
        SignInRequest signInRequest = null;
        TokenModelApiResponse response = 
        api.userSignIn(appKey, signInRequest);
        
        // TODO: test validations
    }
    
    /**
     * 账号注册
     *
     * 使用账号密码进行注册
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userSignUpTest() throws ApiException {
        String appKey = null;
        SignUpRequest signUpRequest = null;
        TokenModelApiResponse response = 
        api.userSignUp(appKey, signUpRequest);
        
        // TODO: test validations
    }
    
    /**
     * 二次验证
     *
     * 获取当前用户在指定应用下启用二次验证（2FA）所需的设置信息，主要包括二维码链接和手动密钥，用户可以将其录入在 Google Authenticator 等 TOTP 应用中，用于后续动态验证码验证。
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userTwoFactorAuthTest() throws ApiException {
        String appKey = null;
        SetupCodeApiResponse response = 
        api.userTwoFactorAuth(appKey);
        
        // TODO: test validations
    }
    
    /**
     * UnionID登录
     *
     * 使用UnionID进行登录
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userUnionIDSignInTest() throws ApiException {
        String appKey = null;
        UnionIDSignInRequest unionIDSignInRequest = null;
        TokenModelApiResponse response = 
        api.userUnionIDSignIn(appKey, unionIDSignInRequest);
        
        // TODO: test validations
    }
    
    /**
     * UnionID注册
     *
     * 使用UnionID进行注册
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userUnionIDSignUpTest() throws ApiException {
        String appKey = null;
        UnionIDSignUpRequest unionIDSignUpRequest = null;
        TokenModelApiResponse response = 
        api.userUnionIDSignUp(appKey, unionIDSignUpRequest);
        
        // TODO: test validations
    }
    
    /**
     * 更新个人资料
     *
     * 更新当前用户的个人资料
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userUpdateProfileTest() throws ApiException {
        String appKey = null;
        UpdateProfileRequest updateProfileRequest = null;
        BooleanApiResponse response = 
        api.userUpdateProfile(appKey, updateProfileRequest);
        
        // TODO: test validations
    }
    
}
