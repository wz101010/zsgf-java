/*
 * 用户全部 API 文档
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.zashigaofa.client.api;

import com.zashigaofa.client.ApiException;
import java.io.File;
import com.zashigaofa.client.model.Int64ApiResponse;
import com.zashigaofa.client.model.QRCodePreSignInRequest;
import com.zashigaofa.client.model.QRCodeScanRequest;
import com.zashigaofa.client.model.QRCodeSignInRequest;
import com.zashigaofa.client.model.QRCodeSignUpRequest;
import com.zashigaofa.client.model.StringApiResponse;
import com.zashigaofa.client.model.TokenModelApiResponse;
import com.zashigaofa.client.model.UserQRCodeScanResultApiResponse;
import com.zashigaofa.client.model.WechatJSConfigResultApiResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for WechatApi
 */
@Disabled
public class WechatApiTest {

    private final WechatApi api = new WechatApi();

    
    /**
     * 确认二维码登录请求
     *
     * 微信小程序用户确认二维码登录并获取访问令牌
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void confirmQRCodeLoginTest() throws ApiException {
        String appKey = null;
        QRCodeSignInRequest qrCodeSignInRequest = null;
        TokenModelApiResponse response = 
        api.confirmQRCodeLogin(appKey, qrCodeSignInRequest);
        
        // TODO: test validations
    }
    
    /**
     * 确认二维码注册请求
     *
     * 微信小程序用户通过二维码完成注册并获取访问令牌
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void confirmQRCodeRegistrationTest() throws ApiException {
        String appKey = null;
        QRCodeSignUpRequest qrCodeSignUpRequest = null;
        TokenModelApiResponse response = 
        api.confirmQRCodeRegistration(appKey, qrCodeSignUpRequest);
        
        // TODO: test validations
    }
    
    /**
     * 初始化二维码认证会话
     *
     * 创建用于微信小程序扫码登录/注册的认证会话
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void initiateQRAuthSessionTest() throws ApiException {
        String appKey = null;
        QRCodePreSignInRequest qrCodePreSignInRequest = null;
        Int64ApiResponse response = 
        api.initiateQRAuthSession(appKey, qrCodePreSignInRequest);
        
        // TODO: test validations
    }
    
    /**
     * 验证二维码扫描结果
     *
     * 微信小程序扫描二维码并获取应用授权信息
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scanQRCodeForAuthTest() throws ApiException {
        String appKey = null;
        QRCodeScanRequest qrCodeScanRequest = null;
        UserQRCodeScanResultApiResponse response = 
        api.scanQRCodeForAuth(appKey, qrCodeScanRequest);
        
        // TODO: test validations
    }
    
    /**
     * 解密小程序用户数据
     *
     * 解密小程序加密数据
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void wechatDecryptTest() throws ApiException {
        String appKey = null;
        String encryptedData = null;
        String iv = null;
        String sessionKey = null;
        StringApiResponse response = 
        api.wechatDecrypt(appKey, encryptedData, iv, sessionKey);
        
        // TODO: test validations
    }
    
    /**
     * 生成小程序Scheme码
     *
     * 生成小程序的scheme码
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void wechatGenerateSchemeTest() throws ApiException {
        String appKey = null;
        List<Object> requestBody = null;
        StringApiResponse response = 
        api.wechatGenerateScheme(appKey, requestBody);
        
        // TODO: test validations
    }
    
    /**
     * 校验小程序登录状态
     *
     * 校验小程序登录凭证
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void wechatJSCode2SessionTest() throws ApiException {
        String appKey = null;
        String jsCode = null;
        StringApiResponse response = 
        api.wechatJSCode2Session(appKey, jsCode);
        
        // TODO: test validations
    }
    
    /**
     * 配置公众号JS SDK
     *
     * 获取公众号H5的JS SDK配置
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void wechatJSConfigTest() throws ApiException {
        String appKey = null;
        String url = null;
        WechatJSConfigResultApiResponse response = 
        api.wechatJSConfig(appKey, url);
        
        // TODO: test validations
    }
    
    /**
     * 小程序内容安全检测
     *
     * 检测消息内容是否含有违法违规信息
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void wechatMsgSecCheckTest() throws ApiException {
        String appKey = null;
        List<Object> requestBody = null;
        Object response = 
        api.wechatMsgSecCheck(appKey, requestBody);
        
        // TODO: test validations
    }
    
    /**
     * 发送公众号一次性订阅消息
     *
     * 发送公众号H5一次性订阅消息
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void wechatSubscribeMSGTest() throws ApiException {
        String appKey = null;
        List<Object> requestBody = null;
        StringApiResponse response = 
        api.wechatSubscribeMSG(appKey, requestBody);
        
        // TODO: test validations
    }
    
    /**
     * 发送小程序订阅消息
     *
     * 发送小程序订阅消息
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void wechatSubscribeSendTest() throws ApiException {
        String appKey = null;
        List<Object> requestBody = null;
        StringApiResponse response = 
        api.wechatSubscribeSend(appKey, requestBody);
        
        // TODO: test validations
    }
    
    /**
     * 生成小程序URL跳转链接
     *
     * 生成小程序的网页跳转地址
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void wechatUrlLinkGenerateTest() throws ApiException {
        String appKey = null;
        List<Object> requestBody = null;
        StringApiResponse response = 
        api.wechatUrlLinkGenerate(appKey, requestBody);
        
        // TODO: test validations
    }
    
    /**
     * 获取公众号H5 UnionID
     *
     * 获取公众号H5用户的UnionID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void wechatUserInfoTest() throws ApiException {
        String appKey = null;
        String openid = null;
        StringApiResponse response = 
        api.wechatUserInfo(appKey, openid);
        
        // TODO: test validations
    }
    
    /**
     * 获取小程序码（普通）
     *
     * 获取小程序码
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void wechatWXACodeGetTest() throws ApiException {
        String appKey = null;
        List<Object> requestBody = null;
        File response = 
        api.wechatWXACodeGet(appKey, requestBody);
        
        // TODO: test validations
    }
    
    /**
     * 获取小程序码（无限制）
     *
     * 获取无限制的小程序码
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void wechatWXACodeGetUnlimitedTest() throws ApiException {
        String appKey = null;
        List<Object> requestBody = null;
        File response = 
        api.wechatWXACodeGetUnlimited(appKey, requestBody);
        
        // TODO: test validations
    }
    
}
