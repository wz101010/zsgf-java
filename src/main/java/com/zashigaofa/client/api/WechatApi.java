/*
 * 用户全部 API 文档
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.zashigaofa.client.api;

import com.zashigaofa.client.ApiClient;
import com.zashigaofa.client.ApiException;
import com.zashigaofa.client.ApiResponse;
import com.zashigaofa.client.Configuration;
import com.zashigaofa.client.Pair;

import java.io.File;
import com.zashigaofa.client.model.Int64ApiResponse;
import com.zashigaofa.client.model.QRCodePreSignInRequest;
import com.zashigaofa.client.model.QRCodeScanRequest;
import com.zashigaofa.client.model.QRCodeSignInRequest;
import com.zashigaofa.client.model.QRCodeSignUpRequest;
import com.zashigaofa.client.model.StringApiResponse;
import com.zashigaofa.client.model.TokenModelApiResponse;
import com.zashigaofa.client.model.UserQRCodeScanResultApiResponse;
import com.zashigaofa.client.model.WechatJSConfigResultApiResponse;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import org.apache.http.HttpEntity;
import org.apache.http.NameValuePair;
import org.apache.http.entity.mime.MultipartEntityBuilder;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-18T07:36:52.198638406Z[Etc/UTC]", comments = "Generator version: 7.13.0-SNAPSHOT")
public class WechatApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public WechatApi() {
    this(Configuration.getDefaultApiClient());
  }

  public WechatApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * 确认二维码登录请求
   * 微信小程序用户确认二维码登录并获取访问令牌
   * @param appKey  (required)
   * @param qrCodeSignInRequest 登录确认请求参数 (optional)
   * @return TokenModelApiResponse
   * @throws ApiException if fails to make API call
   */
  public TokenModelApiResponse confirmQRCodeLogin(String appKey, QRCodeSignInRequest qrCodeSignInRequest) throws ApiException {
    ApiResponse<TokenModelApiResponse> localVarResponse = confirmQRCodeLoginWithHttpInfo(appKey, qrCodeSignInRequest);
    return localVarResponse.getData();
  }

  /**
   * 确认二维码登录请求
   * 微信小程序用户确认二维码登录并获取访问令牌
   * @param appKey  (required)
   * @param qrCodeSignInRequest 登录确认请求参数 (optional)
   * @return ApiResponse&lt;TokenModelApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<TokenModelApiResponse> confirmQRCodeLoginWithHttpInfo(String appKey, QRCodeSignInRequest qrCodeSignInRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = confirmQRCodeLoginRequestBuilder(appKey, qrCodeSignInRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("confirmQRCodeLogin", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<TokenModelApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<TokenModelApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<TokenModelApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder confirmQRCodeLoginRequestBuilder(String appKey, QRCodeSignInRequest qrCodeSignInRequest) throws ApiException {
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling confirmQRCodeLogin");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Wechat/{appKey}/QR-Auth/Confirm-Login"
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json-patch+json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(qrCodeSignInRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 确认二维码注册请求
   * 微信小程序用户通过二维码完成注册并获取访问令牌
   * @param appKey  (required)
   * @param qrCodeSignUpRequest 注册确认请求参数 (optional)
   * @return TokenModelApiResponse
   * @throws ApiException if fails to make API call
   */
  public TokenModelApiResponse confirmQRCodeRegistration(String appKey, QRCodeSignUpRequest qrCodeSignUpRequest) throws ApiException {
    ApiResponse<TokenModelApiResponse> localVarResponse = confirmQRCodeRegistrationWithHttpInfo(appKey, qrCodeSignUpRequest);
    return localVarResponse.getData();
  }

  /**
   * 确认二维码注册请求
   * 微信小程序用户通过二维码完成注册并获取访问令牌
   * @param appKey  (required)
   * @param qrCodeSignUpRequest 注册确认请求参数 (optional)
   * @return ApiResponse&lt;TokenModelApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<TokenModelApiResponse> confirmQRCodeRegistrationWithHttpInfo(String appKey, QRCodeSignUpRequest qrCodeSignUpRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = confirmQRCodeRegistrationRequestBuilder(appKey, qrCodeSignUpRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("confirmQRCodeRegistration", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<TokenModelApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<TokenModelApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<TokenModelApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder confirmQRCodeRegistrationRequestBuilder(String appKey, QRCodeSignUpRequest qrCodeSignUpRequest) throws ApiException {
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling confirmQRCodeRegistration");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Wechat/{appKey}/QR-Auth/Confirm-Register"
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json-patch+json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(qrCodeSignUpRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 初始化二维码认证会话
   * 创建用于微信小程序扫码登录/注册的认证会话
   * @param appKey  (required)
   * @param qrCodePreSignInRequest 认证会话初始化请求参数 (optional)
   * @return Int64ApiResponse
   * @throws ApiException if fails to make API call
   */
  public Int64ApiResponse initiateQRAuthSession(String appKey, QRCodePreSignInRequest qrCodePreSignInRequest) throws ApiException {
    ApiResponse<Int64ApiResponse> localVarResponse = initiateQRAuthSessionWithHttpInfo(appKey, qrCodePreSignInRequest);
    return localVarResponse.getData();
  }

  /**
   * 初始化二维码认证会话
   * 创建用于微信小程序扫码登录/注册的认证会话
   * @param appKey  (required)
   * @param qrCodePreSignInRequest 认证会话初始化请求参数 (optional)
   * @return ApiResponse&lt;Int64ApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Int64ApiResponse> initiateQRAuthSessionWithHttpInfo(String appKey, QRCodePreSignInRequest qrCodePreSignInRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = initiateQRAuthSessionRequestBuilder(appKey, qrCodePreSignInRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("initiateQRAuthSession", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<Int64ApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<Int64ApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<Int64ApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder initiateQRAuthSessionRequestBuilder(String appKey, QRCodePreSignInRequest qrCodePreSignInRequest) throws ApiException {
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling initiateQRAuthSession");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Wechat/{appKey}/QR-Auth/Initiate"
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json-patch+json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(qrCodePreSignInRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 验证二维码扫描结果
   * 微信小程序扫描二维码并获取应用授权信息
   * @param appKey  (required)
   * @param qrCodeScanRequest 二维码扫描请求参数 (optional)
   * @return UserQRCodeScanResultApiResponse
   * @throws ApiException if fails to make API call
   */
  public UserQRCodeScanResultApiResponse scanQRCodeForAuth(String appKey, QRCodeScanRequest qrCodeScanRequest) throws ApiException {
    ApiResponse<UserQRCodeScanResultApiResponse> localVarResponse = scanQRCodeForAuthWithHttpInfo(appKey, qrCodeScanRequest);
    return localVarResponse.getData();
  }

  /**
   * 验证二维码扫描结果
   * 微信小程序扫描二维码并获取应用授权信息
   * @param appKey  (required)
   * @param qrCodeScanRequest 二维码扫描请求参数 (optional)
   * @return ApiResponse&lt;UserQRCodeScanResultApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<UserQRCodeScanResultApiResponse> scanQRCodeForAuthWithHttpInfo(String appKey, QRCodeScanRequest qrCodeScanRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = scanQRCodeForAuthRequestBuilder(appKey, qrCodeScanRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("scanQRCodeForAuth", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<UserQRCodeScanResultApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<UserQRCodeScanResultApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<UserQRCodeScanResultApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder scanQRCodeForAuthRequestBuilder(String appKey, QRCodeScanRequest qrCodeScanRequest) throws ApiException {
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling scanQRCodeForAuth");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Wechat/{appKey}/QR-Auth/Scan"
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json-patch+json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(qrCodeScanRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 解密小程序用户数据
   * 解密小程序加密数据
   * @param appKey  (required)
   * @param encryptedData 加密的数据 (optional)
   * @param iv 加密算法的初始向量 (optional)
   * @param sessionKey 会话密钥 (optional)
   * @return StringApiResponse
   * @throws ApiException if fails to make API call
   */
  public StringApiResponse wechatDecrypt(String appKey, String encryptedData, String iv, String sessionKey) throws ApiException {
    ApiResponse<StringApiResponse> localVarResponse = wechatDecryptWithHttpInfo(appKey, encryptedData, iv, sessionKey);
    return localVarResponse.getData();
  }

  /**
   * 解密小程序用户数据
   * 解密小程序加密数据
   * @param appKey  (required)
   * @param encryptedData 加密的数据 (optional)
   * @param iv 加密算法的初始向量 (optional)
   * @param sessionKey 会话密钥 (optional)
   * @return ApiResponse&lt;StringApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<StringApiResponse> wechatDecryptWithHttpInfo(String appKey, String encryptedData, String iv, String sessionKey) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = wechatDecryptRequestBuilder(appKey, encryptedData, iv, sessionKey);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("wechatDecrypt", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<StringApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<StringApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<StringApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder wechatDecryptRequestBuilder(String appKey, String encryptedData, String iv, String sessionKey) throws ApiException {
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling wechatDecrypt");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Wechat/{appKey}/Decrypt"
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "encryptedData";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("encryptedData", encryptedData));
    localVarQueryParameterBaseName = "iv";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("iv", iv));
    localVarQueryParameterBaseName = "sessionKey";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sessionKey", sessionKey));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 生成小程序Scheme码
   * 生成小程序的scheme码
   * @param appKey  (required)
   * @param requestBody scheme码数据，开发参考：https://developers.weixin.qq.com/miniprogram/dev/OpenApiDoc/qrcode-link/url-scheme/generateScheme.html (optional)
   * @return StringApiResponse
   * @throws ApiException if fails to make API call
   */
  public StringApiResponse wechatGenerateScheme(String appKey, List<Object> requestBody) throws ApiException {
    ApiResponse<StringApiResponse> localVarResponse = wechatGenerateSchemeWithHttpInfo(appKey, requestBody);
    return localVarResponse.getData();
  }

  /**
   * 生成小程序Scheme码
   * 生成小程序的scheme码
   * @param appKey  (required)
   * @param requestBody scheme码数据，开发参考：https://developers.weixin.qq.com/miniprogram/dev/OpenApiDoc/qrcode-link/url-scheme/generateScheme.html (optional)
   * @return ApiResponse&lt;StringApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<StringApiResponse> wechatGenerateSchemeWithHttpInfo(String appKey, List<Object> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = wechatGenerateSchemeRequestBuilder(appKey, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("wechatGenerateScheme", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<StringApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<StringApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<StringApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder wechatGenerateSchemeRequestBuilder(String appKey, List<Object> requestBody) throws ApiException {
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling wechatGenerateScheme");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Wechat/{appKey}/GenerateScheme"
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json-patch+json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 校验小程序登录状态
   * 校验小程序登录凭证
   * @param appKey  (required)
   * @param jsCode 登录凭证，开发参考：https://dwz.cn/icNajFh7 (optional)
   * @return StringApiResponse
   * @throws ApiException if fails to make API call
   */
  public StringApiResponse wechatJSCode2Session(String appKey, String jsCode) throws ApiException {
    ApiResponse<StringApiResponse> localVarResponse = wechatJSCode2SessionWithHttpInfo(appKey, jsCode);
    return localVarResponse.getData();
  }

  /**
   * 校验小程序登录状态
   * 校验小程序登录凭证
   * @param appKey  (required)
   * @param jsCode 登录凭证，开发参考：https://dwz.cn/icNajFh7 (optional)
   * @return ApiResponse&lt;StringApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<StringApiResponse> wechatJSCode2SessionWithHttpInfo(String appKey, String jsCode) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = wechatJSCode2SessionRequestBuilder(appKey, jsCode);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("wechatJSCode2Session", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<StringApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<StringApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<StringApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder wechatJSCode2SessionRequestBuilder(String appKey, String jsCode) throws ApiException {
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling wechatJSCode2Session");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Wechat/{appKey}/JSCode2Session"
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "js_code";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("js_code", jsCode));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 配置公众号JS SDK
   * 获取公众号H5的JS SDK配置
   * @param appKey  (required)
   * @param url 当前网页的URL (optional)
   * @return WechatJSConfigResultApiResponse
   * @throws ApiException if fails to make API call
   */
  public WechatJSConfigResultApiResponse wechatJSConfig(String appKey, String url) throws ApiException {
    ApiResponse<WechatJSConfigResultApiResponse> localVarResponse = wechatJSConfigWithHttpInfo(appKey, url);
    return localVarResponse.getData();
  }

  /**
   * 配置公众号JS SDK
   * 获取公众号H5的JS SDK配置
   * @param appKey  (required)
   * @param url 当前网页的URL (optional)
   * @return ApiResponse&lt;WechatJSConfigResultApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<WechatJSConfigResultApiResponse> wechatJSConfigWithHttpInfo(String appKey, String url) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = wechatJSConfigRequestBuilder(appKey, url);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("wechatJSConfig", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<WechatJSConfigResultApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<WechatJSConfigResultApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<WechatJSConfigResultApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder wechatJSConfigRequestBuilder(String appKey, String url) throws ApiException {
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling wechatJSConfig");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Wechat/{appKey}/JSConfig"
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "url";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("url", url));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 小程序内容安全检测
   * 检测消息内容是否含有违法违规信息
   * @param appKey  (required)
   * @param requestBody 消息内容数据，开发参考：https://developers.weixin.qq.com/miniprogram/dev/OpenApiDoc/sec-center/sec-check/msgSecCheck.html (optional)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object wechatMsgSecCheck(String appKey, List<Object> requestBody) throws ApiException {
    ApiResponse<Object> localVarResponse = wechatMsgSecCheckWithHttpInfo(appKey, requestBody);
    return localVarResponse.getData();
  }

  /**
   * 小程序内容安全检测
   * 检测消息内容是否含有违法违规信息
   * @param appKey  (required)
   * @param requestBody 消息内容数据，开发参考：https://developers.weixin.qq.com/miniprogram/dev/OpenApiDoc/sec-center/sec-check/msgSecCheck.html (optional)
   * @return ApiResponse&lt;Object&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Object> wechatMsgSecCheckWithHttpInfo(String appKey, List<Object> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = wechatMsgSecCheckRequestBuilder(appKey, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("wechatMsgSecCheck", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<Object>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<Object>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<Object>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder wechatMsgSecCheckRequestBuilder(String appKey, List<Object> requestBody) throws ApiException {
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling wechatMsgSecCheck");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Wechat/{appKey}/MsgSecCheck"
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json-patch+json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 发送公众号一次性订阅消息
   * 发送公众号H5一次性订阅消息
   * @param appKey  (required)
   * @param requestBody 订阅消息数据，开发参考：https://dwz.cn/IXptek5n (optional)
   * @return StringApiResponse
   * @throws ApiException if fails to make API call
   */
  public StringApiResponse wechatSubscribeMSG(String appKey, List<Object> requestBody) throws ApiException {
    ApiResponse<StringApiResponse> localVarResponse = wechatSubscribeMSGWithHttpInfo(appKey, requestBody);
    return localVarResponse.getData();
  }

  /**
   * 发送公众号一次性订阅消息
   * 发送公众号H5一次性订阅消息
   * @param appKey  (required)
   * @param requestBody 订阅消息数据，开发参考：https://dwz.cn/IXptek5n (optional)
   * @return ApiResponse&lt;StringApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<StringApiResponse> wechatSubscribeMSGWithHttpInfo(String appKey, List<Object> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = wechatSubscribeMSGRequestBuilder(appKey, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("wechatSubscribeMSG", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<StringApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<StringApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<StringApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder wechatSubscribeMSGRequestBuilder(String appKey, List<Object> requestBody) throws ApiException {
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling wechatSubscribeMSG");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Wechat/{appKey}/SubscribeMSG"
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json-patch+json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 发送小程序订阅消息
   * 发送小程序订阅消息
   * @param appKey  (required)
   * @param requestBody 订阅消息数据，开发参考：https://dwz.cn/bohXaCnp (optional)
   * @return StringApiResponse
   * @throws ApiException if fails to make API call
   */
  public StringApiResponse wechatSubscribeSend(String appKey, List<Object> requestBody) throws ApiException {
    ApiResponse<StringApiResponse> localVarResponse = wechatSubscribeSendWithHttpInfo(appKey, requestBody);
    return localVarResponse.getData();
  }

  /**
   * 发送小程序订阅消息
   * 发送小程序订阅消息
   * @param appKey  (required)
   * @param requestBody 订阅消息数据，开发参考：https://dwz.cn/bohXaCnp (optional)
   * @return ApiResponse&lt;StringApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<StringApiResponse> wechatSubscribeSendWithHttpInfo(String appKey, List<Object> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = wechatSubscribeSendRequestBuilder(appKey, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("wechatSubscribeSend", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<StringApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<StringApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<StringApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder wechatSubscribeSendRequestBuilder(String appKey, List<Object> requestBody) throws ApiException {
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling wechatSubscribeSend");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Wechat/{appKey}/SubscribeSend"
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json-patch+json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 生成小程序URL跳转链接
   * 生成小程序的网页跳转地址
   * @param appKey  (required)
   * @param requestBody 跳转地址数据，开发参考：https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/url-link/urllink.generate.html (optional)
   * @return StringApiResponse
   * @throws ApiException if fails to make API call
   */
  public StringApiResponse wechatUrlLinkGenerate(String appKey, List<Object> requestBody) throws ApiException {
    ApiResponse<StringApiResponse> localVarResponse = wechatUrlLinkGenerateWithHttpInfo(appKey, requestBody);
    return localVarResponse.getData();
  }

  /**
   * 生成小程序URL跳转链接
   * 生成小程序的网页跳转地址
   * @param appKey  (required)
   * @param requestBody 跳转地址数据，开发参考：https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/url-link/urllink.generate.html (optional)
   * @return ApiResponse&lt;StringApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<StringApiResponse> wechatUrlLinkGenerateWithHttpInfo(String appKey, List<Object> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = wechatUrlLinkGenerateRequestBuilder(appKey, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("wechatUrlLinkGenerate", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<StringApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<StringApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<StringApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder wechatUrlLinkGenerateRequestBuilder(String appKey, List<Object> requestBody) throws ApiException {
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling wechatUrlLinkGenerate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Wechat/{appKey}/UrlLinkGenerate"
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json-patch+json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 获取公众号H5 UnionID
   * 获取公众号H5用户的UnionID
   * @param appKey  (required)
   * @param openid 用户的OpenID (optional)
   * @return StringApiResponse
   * @throws ApiException if fails to make API call
   */
  public StringApiResponse wechatUserInfo(String appKey, String openid) throws ApiException {
    ApiResponse<StringApiResponse> localVarResponse = wechatUserInfoWithHttpInfo(appKey, openid);
    return localVarResponse.getData();
  }

  /**
   * 获取公众号H5 UnionID
   * 获取公众号H5用户的UnionID
   * @param appKey  (required)
   * @param openid 用户的OpenID (optional)
   * @return ApiResponse&lt;StringApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<StringApiResponse> wechatUserInfoWithHttpInfo(String appKey, String openid) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = wechatUserInfoRequestBuilder(appKey, openid);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("wechatUserInfo", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<StringApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<StringApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<StringApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder wechatUserInfoRequestBuilder(String appKey, String openid) throws ApiException {
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling wechatUserInfo");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Wechat/{appKey}/UserInfo"
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "openid";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("openid", openid));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 获取小程序码（普通）
   * 获取小程序码
   * @param appKey  (required)
   * @param requestBody 小程序码数据，开发参考：https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/qr-code/wxacode.get.html (optional)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File wechatWXACodeGet(String appKey, List<Object> requestBody) throws ApiException {
    ApiResponse<File> localVarResponse = wechatWXACodeGetWithHttpInfo(appKey, requestBody);
    return localVarResponse.getData();
  }

  /**
   * 获取小程序码（普通）
   * 获取小程序码
   * @param appKey  (required)
   * @param requestBody 小程序码数据，开发参考：https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/qr-code/wxacode.get.html (optional)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> wechatWXACodeGetWithHttpInfo(String appKey, List<Object> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = wechatWXACodeGetRequestBuilder(appKey, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("wechatWXACodeGet", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder wechatWXACodeGetRequestBuilder(String appKey, List<Object> requestBody) throws ApiException {
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling wechatWXACodeGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Wechat/{appKey}/WXACodeGet"
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json-patch+json");
    localVarRequestBuilder.header("Accept", "image/jpeg");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 获取小程序码（无限制）
   * 获取无限制的小程序码
   * @param appKey  (required)
   * @param requestBody 小程序码数据，开发参考：https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/qr-code/wxacode.getUnlimited.html (optional)
   * @return File
   * @throws ApiException if fails to make API call
   */
  public File wechatWXACodeGetUnlimited(String appKey, List<Object> requestBody) throws ApiException {
    ApiResponse<File> localVarResponse = wechatWXACodeGetUnlimitedWithHttpInfo(appKey, requestBody);
    return localVarResponse.getData();
  }

  /**
   * 获取小程序码（无限制）
   * 获取无限制的小程序码
   * @param appKey  (required)
   * @param requestBody 小程序码数据，开发参考：https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/qr-code/wxacode.getUnlimited.html (optional)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<File> wechatWXACodeGetUnlimitedWithHttpInfo(String appKey, List<Object> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = wechatWXACodeGetUnlimitedRequestBuilder(appKey, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("wechatWXACodeGetUnlimited", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<File>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<File>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<File>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder wechatWXACodeGetUnlimitedRequestBuilder(String appKey, List<Object> requestBody) throws ApiException {
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling wechatWXACodeGetUnlimited");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Wechat/{appKey}/WXACodeGetUnlimited"
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json-patch+json");
    localVarRequestBuilder.header("Accept", "image/jpeg");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

}
