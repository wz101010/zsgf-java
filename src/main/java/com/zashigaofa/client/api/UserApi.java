/*
 * 用户全部 API 文档
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.zashigaofa.client.api;

import com.zashigaofa.client.ApiClient;
import com.zashigaofa.client.ApiException;
import com.zashigaofa.client.ApiResponse;
import com.zashigaofa.client.Configuration;
import com.zashigaofa.client.Pair;

import com.zashigaofa.client.model.AppUserResetEmailRequest;
import com.zashigaofa.client.model.AppUserResetPhoneRequest;
import com.zashigaofa.client.model.AppUserResetPwdRequest;
import com.zashigaofa.client.model.BooleanApiResponse;
import com.zashigaofa.client.model.EmailSignInRequest;
import com.zashigaofa.client.model.EmailSignUpRequest;
import com.zashigaofa.client.model.PhoneSignInRequest;
import com.zashigaofa.client.model.PhoneSignUpRequest;
import com.zashigaofa.client.model.SendEmailCodeRequest;
import com.zashigaofa.client.model.SendSMSCodeRequest;
import com.zashigaofa.client.model.SetupCodeApiResponse;
import com.zashigaofa.client.model.SignInRequest;
import com.zashigaofa.client.model.SignUpRequest;
import com.zashigaofa.client.model.TokenModelApiResponse;
import com.zashigaofa.client.model.UnionIDSignInRequest;
import com.zashigaofa.client.model.UnionIDSignUpRequest;
import com.zashigaofa.client.model.UpdateProfileRequest;
import com.zashigaofa.client.model.UserProfileResultApiResponse;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import org.apache.http.HttpEntity;
import org.apache.http.NameValuePair;
import org.apache.http.entity.mime.MultipartEntityBuilder;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-18T07:36:52.198638406Z[Etc/UTC]", comments = "Generator version: 7.13.0-SNAPSHOT")
public class UserApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public UserApi() {
    this(Configuration.getDefaultApiClient());
  }

  public UserApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * 注销账号
   * 清除用户所有附属数据，并注销账号
   * @param appKey  (required)
   * @return BooleanApiResponse
   * @throws ApiException if fails to make API call
   */
  public BooleanApiResponse userDeactivateHard(String appKey) throws ApiException {
    ApiResponse<BooleanApiResponse> localVarResponse = userDeactivateHardWithHttpInfo(appKey);
    return localVarResponse.getData();
  }

  /**
   * 注销账号
   * 清除用户所有附属数据，并注销账号
   * @param appKey  (required)
   * @return ApiResponse&lt;BooleanApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BooleanApiResponse> userDeactivateHardWithHttpInfo(String appKey) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = userDeactivateHardRequestBuilder(appKey);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("userDeactivateHard", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<BooleanApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<BooleanApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<BooleanApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder userDeactivateHardRequestBuilder(String appKey) throws ApiException {
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling userDeactivateHard");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/User/{appKey}/DeactivateHard"
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 邮箱登录
   * 使用邮箱进行登录
   * @param appKey  (required)
   * @param emailSignInRequest 登录请求参数 (optional)
   * @return TokenModelApiResponse
   * @throws ApiException if fails to make API call
   */
  public TokenModelApiResponse userEmailSignIn(String appKey, EmailSignInRequest emailSignInRequest) throws ApiException {
    ApiResponse<TokenModelApiResponse> localVarResponse = userEmailSignInWithHttpInfo(appKey, emailSignInRequest);
    return localVarResponse.getData();
  }

  /**
   * 邮箱登录
   * 使用邮箱进行登录
   * @param appKey  (required)
   * @param emailSignInRequest 登录请求参数 (optional)
   * @return ApiResponse&lt;TokenModelApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<TokenModelApiResponse> userEmailSignInWithHttpInfo(String appKey, EmailSignInRequest emailSignInRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = userEmailSignInRequestBuilder(appKey, emailSignInRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("userEmailSignIn", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<TokenModelApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<TokenModelApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<TokenModelApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder userEmailSignInRequestBuilder(String appKey, EmailSignInRequest emailSignInRequest) throws ApiException {
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling userEmailSignIn");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/User/{appKey}/EmailSignIn"
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json-patch+json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(emailSignInRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 邮箱注册
   * 使用邮箱进行注册
   * @param appKey  (required)
   * @param emailSignUpRequest 注册请求参数 (optional)
   * @return TokenModelApiResponse
   * @throws ApiException if fails to make API call
   */
  public TokenModelApiResponse userEmailSignUp(String appKey, EmailSignUpRequest emailSignUpRequest) throws ApiException {
    ApiResponse<TokenModelApiResponse> localVarResponse = userEmailSignUpWithHttpInfo(appKey, emailSignUpRequest);
    return localVarResponse.getData();
  }

  /**
   * 邮箱注册
   * 使用邮箱进行注册
   * @param appKey  (required)
   * @param emailSignUpRequest 注册请求参数 (optional)
   * @return ApiResponse&lt;TokenModelApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<TokenModelApiResponse> userEmailSignUpWithHttpInfo(String appKey, EmailSignUpRequest emailSignUpRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = userEmailSignUpRequestBuilder(appKey, emailSignUpRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("userEmailSignUp", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<TokenModelApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<TokenModelApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<TokenModelApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder userEmailSignUpRequestBuilder(String appKey, EmailSignUpRequest emailSignUpRequest) throws ApiException {
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling userEmailSignUp");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/User/{appKey}/EmailSignUp"
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json-patch+json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(emailSignUpRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 手机登录
   * 使用手机号码进行登录
   * @param appKey  (required)
   * @param phoneSignInRequest 登录请求参数 (optional)
   * @return TokenModelApiResponse
   * @throws ApiException if fails to make API call
   */
  public TokenModelApiResponse userPhoneSignIn(String appKey, PhoneSignInRequest phoneSignInRequest) throws ApiException {
    ApiResponse<TokenModelApiResponse> localVarResponse = userPhoneSignInWithHttpInfo(appKey, phoneSignInRequest);
    return localVarResponse.getData();
  }

  /**
   * 手机登录
   * 使用手机号码进行登录
   * @param appKey  (required)
   * @param phoneSignInRequest 登录请求参数 (optional)
   * @return ApiResponse&lt;TokenModelApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<TokenModelApiResponse> userPhoneSignInWithHttpInfo(String appKey, PhoneSignInRequest phoneSignInRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = userPhoneSignInRequestBuilder(appKey, phoneSignInRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("userPhoneSignIn", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<TokenModelApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<TokenModelApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<TokenModelApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder userPhoneSignInRequestBuilder(String appKey, PhoneSignInRequest phoneSignInRequest) throws ApiException {
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling userPhoneSignIn");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/User/{appKey}/PhoneSignIn"
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json-patch+json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(phoneSignInRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 手机注册
   * 使用手机号码进行注册
   * @param appKey  (required)
   * @param phoneSignUpRequest 注册请求参数 (optional)
   * @return TokenModelApiResponse
   * @throws ApiException if fails to make API call
   */
  public TokenModelApiResponse userPhoneSignUp(String appKey, PhoneSignUpRequest phoneSignUpRequest) throws ApiException {
    ApiResponse<TokenModelApiResponse> localVarResponse = userPhoneSignUpWithHttpInfo(appKey, phoneSignUpRequest);
    return localVarResponse.getData();
  }

  /**
   * 手机注册
   * 使用手机号码进行注册
   * @param appKey  (required)
   * @param phoneSignUpRequest 注册请求参数 (optional)
   * @return ApiResponse&lt;TokenModelApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<TokenModelApiResponse> userPhoneSignUpWithHttpInfo(String appKey, PhoneSignUpRequest phoneSignUpRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = userPhoneSignUpRequestBuilder(appKey, phoneSignUpRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("userPhoneSignUp", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<TokenModelApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<TokenModelApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<TokenModelApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder userPhoneSignUpRequestBuilder(String appKey, PhoneSignUpRequest phoneSignUpRequest) throws ApiException {
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling userPhoneSignUp");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/User/{appKey}/PhoneSignUp"
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json-patch+json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(phoneSignUpRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 获取个人资料
   * 获取当前用户的个人资料
   * @param appKey  (required)
   * @return UserProfileResultApiResponse
   * @throws ApiException if fails to make API call
   */
  public UserProfileResultApiResponse userProfile(String appKey) throws ApiException {
    ApiResponse<UserProfileResultApiResponse> localVarResponse = userProfileWithHttpInfo(appKey);
    return localVarResponse.getData();
  }

  /**
   * 获取个人资料
   * 获取当前用户的个人资料
   * @param appKey  (required)
   * @return ApiResponse&lt;UserProfileResultApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<UserProfileResultApiResponse> userProfileWithHttpInfo(String appKey) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = userProfileRequestBuilder(appKey);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("userProfile", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<UserProfileResultApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<UserProfileResultApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<UserProfileResultApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder userProfileRequestBuilder(String appKey) throws ApiException {
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling userProfile");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/User/{appKey}/Profile"
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 重置邮箱
   * 通过邮箱验证码重置邮箱
   * @param appKey  (required)
   * @param appUserResetEmailRequest 重置邮箱的请求参数 (optional)
   * @return BooleanApiResponse
   * @throws ApiException if fails to make API call
   */
  public BooleanApiResponse userResetEmail(String appKey, AppUserResetEmailRequest appUserResetEmailRequest) throws ApiException {
    ApiResponse<BooleanApiResponse> localVarResponse = userResetEmailWithHttpInfo(appKey, appUserResetEmailRequest);
    return localVarResponse.getData();
  }

  /**
   * 重置邮箱
   * 通过邮箱验证码重置邮箱
   * @param appKey  (required)
   * @param appUserResetEmailRequest 重置邮箱的请求参数 (optional)
   * @return ApiResponse&lt;BooleanApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BooleanApiResponse> userResetEmailWithHttpInfo(String appKey, AppUserResetEmailRequest appUserResetEmailRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = userResetEmailRequestBuilder(appKey, appUserResetEmailRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("userResetEmail", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<BooleanApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<BooleanApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<BooleanApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder userResetEmailRequestBuilder(String appKey, AppUserResetEmailRequest appUserResetEmailRequest) throws ApiException {
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling userResetEmail");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/User/{appKey}/ResetEmail"
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json-patch+json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(appUserResetEmailRequest);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 重置手机号
   * 通过手机号验证码重置手机号
   * @param appKey  (required)
   * @param appUserResetPhoneRequest 重置手机号的请求参数 (optional)
   * @return BooleanApiResponse
   * @throws ApiException if fails to make API call
   */
  public BooleanApiResponse userResetPhone(String appKey, AppUserResetPhoneRequest appUserResetPhoneRequest) throws ApiException {
    ApiResponse<BooleanApiResponse> localVarResponse = userResetPhoneWithHttpInfo(appKey, appUserResetPhoneRequest);
    return localVarResponse.getData();
  }

  /**
   * 重置手机号
   * 通过手机号验证码重置手机号
   * @param appKey  (required)
   * @param appUserResetPhoneRequest 重置手机号的请求参数 (optional)
   * @return ApiResponse&lt;BooleanApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BooleanApiResponse> userResetPhoneWithHttpInfo(String appKey, AppUserResetPhoneRequest appUserResetPhoneRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = userResetPhoneRequestBuilder(appKey, appUserResetPhoneRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("userResetPhone", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<BooleanApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<BooleanApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<BooleanApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder userResetPhoneRequestBuilder(String appKey, AppUserResetPhoneRequest appUserResetPhoneRequest) throws ApiException {
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling userResetPhone");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/User/{appKey}/ResetPhone"
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json-patch+json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(appUserResetPhoneRequest);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 重置密码
   * 通过手机号或邮箱重置密码
   * @param appKey  (required)
   * @param appUserResetPwdRequest 重置密码的请求参数 (optional)
   * @return BooleanApiResponse
   * @throws ApiException if fails to make API call
   */
  public BooleanApiResponse userResetPwd(String appKey, AppUserResetPwdRequest appUserResetPwdRequest) throws ApiException {
    ApiResponse<BooleanApiResponse> localVarResponse = userResetPwdWithHttpInfo(appKey, appUserResetPwdRequest);
    return localVarResponse.getData();
  }

  /**
   * 重置密码
   * 通过手机号或邮箱重置密码
   * @param appKey  (required)
   * @param appUserResetPwdRequest 重置密码的请求参数 (optional)
   * @return ApiResponse&lt;BooleanApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BooleanApiResponse> userResetPwdWithHttpInfo(String appKey, AppUserResetPwdRequest appUserResetPwdRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = userResetPwdRequestBuilder(appKey, appUserResetPwdRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("userResetPwd", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<BooleanApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<BooleanApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<BooleanApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder userResetPwdRequestBuilder(String appKey, AppUserResetPwdRequest appUserResetPwdRequest) throws ApiException {
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling userResetPwd");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/User/{appKey}/ResetPwd"
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json-patch+json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(appUserResetPwdRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 发送邮箱验证码
   * 发送邮箱验证码用于注册或找回密码
   * @param appKey  (required)
   * @param sendEmailCodeRequest 发送邮箱验证码的请求参数 (optional)
   * @return BooleanApiResponse
   * @throws ApiException if fails to make API call
   */
  public BooleanApiResponse userSendEmailCode(String appKey, SendEmailCodeRequest sendEmailCodeRequest) throws ApiException {
    ApiResponse<BooleanApiResponse> localVarResponse = userSendEmailCodeWithHttpInfo(appKey, sendEmailCodeRequest);
    return localVarResponse.getData();
  }

  /**
   * 发送邮箱验证码
   * 发送邮箱验证码用于注册或找回密码
   * @param appKey  (required)
   * @param sendEmailCodeRequest 发送邮箱验证码的请求参数 (optional)
   * @return ApiResponse&lt;BooleanApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BooleanApiResponse> userSendEmailCodeWithHttpInfo(String appKey, SendEmailCodeRequest sendEmailCodeRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = userSendEmailCodeRequestBuilder(appKey, sendEmailCodeRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("userSendEmailCode", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<BooleanApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<BooleanApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<BooleanApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder userSendEmailCodeRequestBuilder(String appKey, SendEmailCodeRequest sendEmailCodeRequest) throws ApiException {
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling userSendEmailCode");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/User/{appKey}/SendEmailCode"
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json-patch+json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(sendEmailCodeRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 发送手机验证码
   * 发送手机验证码用于注册或找回密码
   * @param appKey  (required)
   * @param sendSMSCodeRequest 发送手机验证码的请求参数 (optional)
   * @return BooleanApiResponse
   * @throws ApiException if fails to make API call
   */
  public BooleanApiResponse userSendSMSCode(String appKey, SendSMSCodeRequest sendSMSCodeRequest) throws ApiException {
    ApiResponse<BooleanApiResponse> localVarResponse = userSendSMSCodeWithHttpInfo(appKey, sendSMSCodeRequest);
    return localVarResponse.getData();
  }

  /**
   * 发送手机验证码
   * 发送手机验证码用于注册或找回密码
   * @param appKey  (required)
   * @param sendSMSCodeRequest 发送手机验证码的请求参数 (optional)
   * @return ApiResponse&lt;BooleanApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BooleanApiResponse> userSendSMSCodeWithHttpInfo(String appKey, SendSMSCodeRequest sendSMSCodeRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = userSendSMSCodeRequestBuilder(appKey, sendSMSCodeRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("userSendSMSCode", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<BooleanApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<BooleanApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<BooleanApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder userSendSMSCodeRequestBuilder(String appKey, SendSMSCodeRequest sendSMSCodeRequest) throws ApiException {
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling userSendSMSCode");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/User/{appKey}/SendSMSCode"
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json-patch+json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(sendSMSCodeRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 密码登录
   * 使用账号密码进行登录
   * @param appKey  (required)
   * @param signInRequest 登录请求参数 (optional)
   * @return TokenModelApiResponse
   * @throws ApiException if fails to make API call
   */
  public TokenModelApiResponse userSignIn(String appKey, SignInRequest signInRequest) throws ApiException {
    ApiResponse<TokenModelApiResponse> localVarResponse = userSignInWithHttpInfo(appKey, signInRequest);
    return localVarResponse.getData();
  }

  /**
   * 密码登录
   * 使用账号密码进行登录
   * @param appKey  (required)
   * @param signInRequest 登录请求参数 (optional)
   * @return ApiResponse&lt;TokenModelApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<TokenModelApiResponse> userSignInWithHttpInfo(String appKey, SignInRequest signInRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = userSignInRequestBuilder(appKey, signInRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("userSignIn", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<TokenModelApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<TokenModelApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<TokenModelApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder userSignInRequestBuilder(String appKey, SignInRequest signInRequest) throws ApiException {
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling userSignIn");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/User/{appKey}/SignIn"
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json-patch+json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(signInRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 账号注册
   * 使用账号密码进行注册
   * @param appKey  (required)
   * @param signUpRequest 注册请求参数 (optional)
   * @return TokenModelApiResponse
   * @throws ApiException if fails to make API call
   */
  public TokenModelApiResponse userSignUp(String appKey, SignUpRequest signUpRequest) throws ApiException {
    ApiResponse<TokenModelApiResponse> localVarResponse = userSignUpWithHttpInfo(appKey, signUpRequest);
    return localVarResponse.getData();
  }

  /**
   * 账号注册
   * 使用账号密码进行注册
   * @param appKey  (required)
   * @param signUpRequest 注册请求参数 (optional)
   * @return ApiResponse&lt;TokenModelApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<TokenModelApiResponse> userSignUpWithHttpInfo(String appKey, SignUpRequest signUpRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = userSignUpRequestBuilder(appKey, signUpRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("userSignUp", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<TokenModelApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<TokenModelApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<TokenModelApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder userSignUpRequestBuilder(String appKey, SignUpRequest signUpRequest) throws ApiException {
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling userSignUp");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/User/{appKey}/SignUp"
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json-patch+json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(signUpRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 二次验证
   * 获取当前用户在指定应用下启用二次验证（2FA）所需的设置信息，主要包括二维码链接和手动密钥，用户可以将其录入在 Google Authenticator 等 TOTP 应用中，用于后续动态验证码验证。
   * @param appKey  (required)
   * @return SetupCodeApiResponse
   * @throws ApiException if fails to make API call
   */
  public SetupCodeApiResponse userTwoFactorAuth(String appKey) throws ApiException {
    ApiResponse<SetupCodeApiResponse> localVarResponse = userTwoFactorAuthWithHttpInfo(appKey);
    return localVarResponse.getData();
  }

  /**
   * 二次验证
   * 获取当前用户在指定应用下启用二次验证（2FA）所需的设置信息，主要包括二维码链接和手动密钥，用户可以将其录入在 Google Authenticator 等 TOTP 应用中，用于后续动态验证码验证。
   * @param appKey  (required)
   * @return ApiResponse&lt;SetupCodeApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SetupCodeApiResponse> userTwoFactorAuthWithHttpInfo(String appKey) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = userTwoFactorAuthRequestBuilder(appKey);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("userTwoFactorAuth", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<SetupCodeApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<SetupCodeApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<SetupCodeApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder userTwoFactorAuthRequestBuilder(String appKey) throws ApiException {
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling userTwoFactorAuth");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/User/{appKey}/TwoFactorAuth"
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * UnionID登录
   * 使用UnionID进行登录
   * @param appKey  (required)
   * @param unionIDSignInRequest 登录请求参数 (optional)
   * @return TokenModelApiResponse
   * @throws ApiException if fails to make API call
   */
  public TokenModelApiResponse userUnionIDSignIn(String appKey, UnionIDSignInRequest unionIDSignInRequest) throws ApiException {
    ApiResponse<TokenModelApiResponse> localVarResponse = userUnionIDSignInWithHttpInfo(appKey, unionIDSignInRequest);
    return localVarResponse.getData();
  }

  /**
   * UnionID登录
   * 使用UnionID进行登录
   * @param appKey  (required)
   * @param unionIDSignInRequest 登录请求参数 (optional)
   * @return ApiResponse&lt;TokenModelApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<TokenModelApiResponse> userUnionIDSignInWithHttpInfo(String appKey, UnionIDSignInRequest unionIDSignInRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = userUnionIDSignInRequestBuilder(appKey, unionIDSignInRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("userUnionIDSignIn", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<TokenModelApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<TokenModelApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<TokenModelApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder userUnionIDSignInRequestBuilder(String appKey, UnionIDSignInRequest unionIDSignInRequest) throws ApiException {
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling userUnionIDSignIn");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/User/{appKey}/UnionIDSignIn"
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json-patch+json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(unionIDSignInRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * UnionID注册
   * 使用UnionID进行注册
   * @param appKey  (required)
   * @param unionIDSignUpRequest 注册请求参数 (optional)
   * @return TokenModelApiResponse
   * @throws ApiException if fails to make API call
   */
  public TokenModelApiResponse userUnionIDSignUp(String appKey, UnionIDSignUpRequest unionIDSignUpRequest) throws ApiException {
    ApiResponse<TokenModelApiResponse> localVarResponse = userUnionIDSignUpWithHttpInfo(appKey, unionIDSignUpRequest);
    return localVarResponse.getData();
  }

  /**
   * UnionID注册
   * 使用UnionID进行注册
   * @param appKey  (required)
   * @param unionIDSignUpRequest 注册请求参数 (optional)
   * @return ApiResponse&lt;TokenModelApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<TokenModelApiResponse> userUnionIDSignUpWithHttpInfo(String appKey, UnionIDSignUpRequest unionIDSignUpRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = userUnionIDSignUpRequestBuilder(appKey, unionIDSignUpRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("userUnionIDSignUp", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<TokenModelApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<TokenModelApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<TokenModelApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder userUnionIDSignUpRequestBuilder(String appKey, UnionIDSignUpRequest unionIDSignUpRequest) throws ApiException {
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling userUnionIDSignUp");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/User/{appKey}/UnionIDSignUp"
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json-patch+json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(unionIDSignUpRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 更新个人资料
   * 更新当前用户的个人资料
   * @param appKey  (required)
   * @param updateProfileRequest 更新个人资料的请求参数 (optional)
   * @return BooleanApiResponse
   * @throws ApiException if fails to make API call
   */
  public BooleanApiResponse userUpdateProfile(String appKey, UpdateProfileRequest updateProfileRequest) throws ApiException {
    ApiResponse<BooleanApiResponse> localVarResponse = userUpdateProfileWithHttpInfo(appKey, updateProfileRequest);
    return localVarResponse.getData();
  }

  /**
   * 更新个人资料
   * 更新当前用户的个人资料
   * @param appKey  (required)
   * @param updateProfileRequest 更新个人资料的请求参数 (optional)
   * @return ApiResponse&lt;BooleanApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BooleanApiResponse> userUpdateProfileWithHttpInfo(String appKey, UpdateProfileRequest updateProfileRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = userUpdateProfileRequestBuilder(appKey, updateProfileRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("userUpdateProfile", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<BooleanApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<BooleanApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<BooleanApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder userUpdateProfileRequestBuilder(String appKey, UpdateProfileRequest updateProfileRequest) throws ApiException {
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling userUpdateProfile");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/User/{appKey}/Profile"
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json-patch+json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(updateProfileRequest);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

}
