/*
 * 用户全部 API 文档
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.zashigaofa.client.api;

import com.zashigaofa.client.ApiClient;
import com.zashigaofa.client.ApiException;
import com.zashigaofa.client.ApiResponse;
import com.zashigaofa.client.Configuration;
import com.zashigaofa.client.Pair;

import com.zashigaofa.client.model.BooleanApiResponse;
import com.zashigaofa.client.model.ObjectApiResponse;
import com.zashigaofa.client.model.ObjectListApiResponse;
import java.time.OffsetDateTime;
import com.zashigaofa.client.model.StorageListResultApiResponse;
import com.zashigaofa.client.model.StringApiResponse;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import org.apache.http.HttpEntity;
import org.apache.http.NameValuePair;
import org.apache.http.entity.mime.MultipartEntityBuilder;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-18T07:36:52.198638406Z[Etc/UTC]", comments = "Generator version: 7.13.0-SNAPSHOT")
public class StorageApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public StorageApi() {
    this(Configuration.getDefaultApiClient());
  }

  public StorageApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * 聚合查询
   * 根据聚合管道查询指定表中的数据
   * @param table 表名称 (required)
   * @param appKey  (required)
   * @param pipeline 构建聚合查询 (optional)
   * @return ObjectListApiResponse
   * @throws ApiException if fails to make API call
   */
  public ObjectListApiResponse storageAggregate(String table, String appKey, String pipeline) throws ApiException {
    ApiResponse<ObjectListApiResponse> localVarResponse = storageAggregateWithHttpInfo(table, appKey, pipeline);
    return localVarResponse.getData();
  }

  /**
   * 聚合查询
   * 根据聚合管道查询指定表中的数据
   * @param table 表名称 (required)
   * @param appKey  (required)
   * @param pipeline 构建聚合查询 (optional)
   * @return ApiResponse&lt;ObjectListApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ObjectListApiResponse> storageAggregateWithHttpInfo(String table, String appKey, String pipeline) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = storageAggregateRequestBuilder(table, appKey, pipeline);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("storageAggregate", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<ObjectListApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<ObjectListApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<ObjectListApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder storageAggregateRequestBuilder(String table, String appKey, String pipeline) throws ApiException {
    // verify the required parameter 'table' is set
    if (table == null) {
      throw new ApiException(400, "Missing the required parameter 'table' when calling storageAggregate");
    }
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling storageAggregate");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Storage/{appKey}/{table}/Aggregate"
        .replace("{table}", ApiClient.urlEncode(table.toString()))
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "pipeline";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pipeline", pipeline));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 删除数据
   * 删除指定表中指定ID的数据
   * @param table 表名称 (required)
   * @param id 数据ID (required)
   * @param appKey  (required)
   * @return BooleanApiResponse
   * @throws ApiException if fails to make API call
   */
  public BooleanApiResponse storageDelete(String table, String id, String appKey) throws ApiException {
    ApiResponse<BooleanApiResponse> localVarResponse = storageDeleteWithHttpInfo(table, id, appKey);
    return localVarResponse.getData();
  }

  /**
   * 删除数据
   * 删除指定表中指定ID的数据
   * @param table 表名称 (required)
   * @param id 数据ID (required)
   * @param appKey  (required)
   * @return ApiResponse&lt;BooleanApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BooleanApiResponse> storageDeleteWithHttpInfo(String table, String id, String appKey) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = storageDeleteRequestBuilder(table, id, appKey);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("storageDelete", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<BooleanApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<BooleanApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<BooleanApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder storageDeleteRequestBuilder(String table, String id, String appKey) throws ApiException {
    // verify the required parameter 'table' is set
    if (table == null) {
      throw new ApiException(400, "Missing the required parameter 'table' when calling storageDelete");
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling storageDelete");
    }
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling storageDelete");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Storage/{appKey}/{table}/{id}"
        .replace("{table}", ApiClient.urlEncode(table.toString()))
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 数据详情
   * 获取指定表中指定ID的数据详情
   * @param table 表名称 (required)
   * @param id 数据ID (required)
   * @param appKey  (required)
   * @param project json格式 (optional)
   * @return ObjectApiResponse
   * @throws ApiException if fails to make API call
   */
  public ObjectApiResponse storageDetail(String table, String id, String appKey, String project) throws ApiException {
    ApiResponse<ObjectApiResponse> localVarResponse = storageDetailWithHttpInfo(table, id, appKey, project);
    return localVarResponse.getData();
  }

  /**
   * 数据详情
   * 获取指定表中指定ID的数据详情
   * @param table 表名称 (required)
   * @param id 数据ID (required)
   * @param appKey  (required)
   * @param project json格式 (optional)
   * @return ApiResponse&lt;ObjectApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ObjectApiResponse> storageDetailWithHttpInfo(String table, String id, String appKey, String project) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = storageDetailRequestBuilder(table, id, appKey, project);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("storageDetail", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<ObjectApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<ObjectApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<ObjectApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder storageDetailRequestBuilder(String table, String id, String appKey, String project) throws ApiException {
    // verify the required parameter 'table' is set
    if (table == null) {
      throw new ApiException(400, "Missing the required parameter 'table' when calling storageDetail");
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling storageDetail");
    }
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling storageDetail");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Storage/{appKey}/{table}/{id}"
        .replace("{table}", ApiClient.urlEncode(table.toString()))
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "project";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("project", project));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 查询数据
   * 根据条件查询指定表中的数据
   * @param table 表名称 (required)
   * @param appKey  (required)
   * @param filter 过滤，json格式 (optional)
   * @param project 字段映射，json格式 (optional)
   * @param sort 排序，json格式 (optional)
   * @param startTime 开始时间 (optional)
   * @param endTime 结束时间 (optional)
   * @param explain 查看执行计划 (optional, default to false)
   * @param take 默认为10 (optional, default to 10)
   * @param skip 默认为0 (optional, default to 0)
   * @return StorageListResultApiResponse
   * @throws ApiException if fails to make API call
   */
  public StorageListResultApiResponse storageList(String table, String appKey, String filter, String project, String sort, OffsetDateTime startTime, OffsetDateTime endTime, Boolean explain, Integer take, Integer skip) throws ApiException {
    ApiResponse<StorageListResultApiResponse> localVarResponse = storageListWithHttpInfo(table, appKey, filter, project, sort, startTime, endTime, explain, take, skip);
    return localVarResponse.getData();
  }

  /**
   * 查询数据
   * 根据条件查询指定表中的数据
   * @param table 表名称 (required)
   * @param appKey  (required)
   * @param filter 过滤，json格式 (optional)
   * @param project 字段映射，json格式 (optional)
   * @param sort 排序，json格式 (optional)
   * @param startTime 开始时间 (optional)
   * @param endTime 结束时间 (optional)
   * @param explain 查看执行计划 (optional, default to false)
   * @param take 默认为10 (optional, default to 10)
   * @param skip 默认为0 (optional, default to 0)
   * @return ApiResponse&lt;StorageListResultApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<StorageListResultApiResponse> storageListWithHttpInfo(String table, String appKey, String filter, String project, String sort, OffsetDateTime startTime, OffsetDateTime endTime, Boolean explain, Integer take, Integer skip) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = storageListRequestBuilder(table, appKey, filter, project, sort, startTime, endTime, explain, take, skip);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("storageList", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<StorageListResultApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<StorageListResultApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<StorageListResultApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder storageListRequestBuilder(String table, String appKey, String filter, String project, String sort, OffsetDateTime startTime, OffsetDateTime endTime, Boolean explain, Integer take, Integer skip) throws ApiException {
    // verify the required parameter 'table' is set
    if (table == null) {
      throw new ApiException(400, "Missing the required parameter 'table' when calling storageList");
    }
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling storageList");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Storage/{appKey}/{table}"
        .replace("{table}", ApiClient.urlEncode(table.toString()))
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "project";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("project", project));
    localVarQueryParameterBaseName = "sort";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sort", sort));
    localVarQueryParameterBaseName = "startTime";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("startTime", startTime));
    localVarQueryParameterBaseName = "endTime";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("endTime", endTime));
    localVarQueryParameterBaseName = "explain";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("explain", explain));
    localVarQueryParameterBaseName = "take";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("take", take));
    localVarQueryParameterBaseName = "skip";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("skip", skip));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 添加数据
   * 向指定表中添加数据，可以是单个json对象或json数组
   * @param table 表名称（小写字母加数字,1-50位） (required)
   * @param appKey  (required)
   * @param requestBody json对象 / json数组 (required)
   * @return StringApiResponse
   * @throws ApiException if fails to make API call
   */
  public StringApiResponse storagePost(String table, String appKey, List<Object> requestBody) throws ApiException {
    ApiResponse<StringApiResponse> localVarResponse = storagePostWithHttpInfo(table, appKey, requestBody);
    return localVarResponse.getData();
  }

  /**
   * 添加数据
   * 向指定表中添加数据，可以是单个json对象或json数组
   * @param table 表名称（小写字母加数字,1-50位） (required)
   * @param appKey  (required)
   * @param requestBody json对象 / json数组 (required)
   * @return ApiResponse&lt;StringApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<StringApiResponse> storagePostWithHttpInfo(String table, String appKey, List<Object> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = storagePostRequestBuilder(table, appKey, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("storagePost", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<StringApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<StringApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<StringApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder storagePostRequestBuilder(String table, String appKey, List<Object> requestBody) throws ApiException {
    // verify the required parameter 'table' is set
    if (table == null) {
      throw new ApiException(400, "Missing the required parameter 'table' when calling storagePost");
    }
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling storagePost");
    }
    // verify the required parameter 'requestBody' is set
    if (requestBody == null) {
      throw new ApiException(400, "Missing the required parameter 'requestBody' when calling storagePost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Storage/{appKey}/{table}"
        .replace("{table}", ApiClient.urlEncode(table.toString()))
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json-patch+json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 更新数据
   * 更新指定表中指定ID的数据，可以选择全量更新或部分更新
   * @param table 表名称 (required)
   * @param id 数据ID (required)
   * @param appKey  (required)
   * @param requestBody json格式 (required)
   * @param replace 是否为全量更新，默认为false (optional, default to false)
   * @return BooleanApiResponse
   * @throws ApiException if fails to make API call
   */
  public BooleanApiResponse storagePut(String table, String id, String appKey, List<Object> requestBody, Boolean replace) throws ApiException {
    ApiResponse<BooleanApiResponse> localVarResponse = storagePutWithHttpInfo(table, id, appKey, requestBody, replace);
    return localVarResponse.getData();
  }

  /**
   * 更新数据
   * 更新指定表中指定ID的数据，可以选择全量更新或部分更新
   * @param table 表名称 (required)
   * @param id 数据ID (required)
   * @param appKey  (required)
   * @param requestBody json格式 (required)
   * @param replace 是否为全量更新，默认为false (optional, default to false)
   * @return ApiResponse&lt;BooleanApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BooleanApiResponse> storagePutWithHttpInfo(String table, String id, String appKey, List<Object> requestBody, Boolean replace) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = storagePutRequestBuilder(table, id, appKey, requestBody, replace);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("storagePut", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<BooleanApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<BooleanApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<BooleanApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder storagePutRequestBuilder(String table, String id, String appKey, List<Object> requestBody, Boolean replace) throws ApiException {
    // verify the required parameter 'table' is set
    if (table == null) {
      throw new ApiException(400, "Missing the required parameter 'table' when calling storagePut");
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling storagePut");
    }
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling storagePut");
    }
    // verify the required parameter 'requestBody' is set
    if (requestBody == null) {
      throw new ApiException(400, "Missing the required parameter 'requestBody' when calling storagePut");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Storage/{appKey}/{table}/{id}"
        .replace("{table}", ApiClient.urlEncode(table.toString()))
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "replace";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("replace", replace));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json-patch+json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

}
