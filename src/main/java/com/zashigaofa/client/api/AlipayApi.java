/*
 * 用户全部 API 文档
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.zashigaofa.client.api;

import com.zashigaofa.client.ApiClient;
import com.zashigaofa.client.ApiException;
import com.zashigaofa.client.ApiResponse;
import com.zashigaofa.client.Configuration;
import com.zashigaofa.client.Pair;

import com.zashigaofa.client.model.AlipayCreateOrderPagePayRequest;
import com.zashigaofa.client.model.AlipayCreateOrderRequest;
import com.zashigaofa.client.model.AlipayCreateOrderWapPayRequest;
import com.zashigaofa.client.model.AlipayTradeQueryResponseApiResponse;
import com.zashigaofa.client.model.AlipayTradeRefundResponseApiResponse;
import com.zashigaofa.client.model.BooleanApiResponse;
import com.zashigaofa.client.model.ReturnPageNotifyRequest;
import com.zashigaofa.client.model.StringApiResponse;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-18T07:36:52.198638406Z[Etc/UTC]", comments = "Generator version: 7.13.0-SNAPSHOT")
public class AlipayApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public AlipayApi() {
    this(Configuration.getDefaultApiClient());
  }

  public AlipayApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * 创建当面付订单
   * 创建一个当面付订单，并返回支付二维码。
   * @param appKey  (required)
   * @param alipayCreateOrderRequest  (optional)
   * @return StringApiResponse
   * @throws ApiException if fails to make API call
   */
  public StringApiResponse alipayCreateOrder(String appKey, AlipayCreateOrderRequest alipayCreateOrderRequest) throws ApiException {
    ApiResponse<StringApiResponse> localVarResponse = alipayCreateOrderWithHttpInfo(appKey, alipayCreateOrderRequest);
    return localVarResponse.getData();
  }

  /**
   * 创建当面付订单
   * 创建一个当面付订单，并返回支付二维码。
   * @param appKey  (required)
   * @param alipayCreateOrderRequest  (optional)
   * @return ApiResponse&lt;StringApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<StringApiResponse> alipayCreateOrderWithHttpInfo(String appKey, AlipayCreateOrderRequest alipayCreateOrderRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = alipayCreateOrderRequestBuilder(appKey, alipayCreateOrderRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("alipayCreateOrder", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<StringApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<StringApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<StringApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder alipayCreateOrderRequestBuilder(String appKey, AlipayCreateOrderRequest alipayCreateOrderRequest) throws ApiException {
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling alipayCreateOrder");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Alipay/{appKey}/CreateOrder"
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json-patch+json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(alipayCreateOrderRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 创建PC支付订单
   * 创建一个PC支付订单，并返回支付页面。
   * @param appKey  (required)
   * @param alipayCreateOrderPagePayRequest  (optional)
   * @return StringApiResponse
   * @throws ApiException if fails to make API call
   */
  public StringApiResponse alipayCreateOrderPagePay(String appKey, AlipayCreateOrderPagePayRequest alipayCreateOrderPagePayRequest) throws ApiException {
    ApiResponse<StringApiResponse> localVarResponse = alipayCreateOrderPagePayWithHttpInfo(appKey, alipayCreateOrderPagePayRequest);
    return localVarResponse.getData();
  }

  /**
   * 创建PC支付订单
   * 创建一个PC支付订单，并返回支付页面。
   * @param appKey  (required)
   * @param alipayCreateOrderPagePayRequest  (optional)
   * @return ApiResponse&lt;StringApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<StringApiResponse> alipayCreateOrderPagePayWithHttpInfo(String appKey, AlipayCreateOrderPagePayRequest alipayCreateOrderPagePayRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = alipayCreateOrderPagePayRequestBuilder(appKey, alipayCreateOrderPagePayRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("alipayCreateOrderPagePay", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<StringApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<StringApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<StringApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder alipayCreateOrderPagePayRequestBuilder(String appKey, AlipayCreateOrderPagePayRequest alipayCreateOrderPagePayRequest) throws ApiException {
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling alipayCreateOrderPagePay");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Alipay/{appKey}/CreateOrderPagePay"
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json-patch+json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(alipayCreateOrderPagePayRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 创建WAP支付订单
   * 创建一个WAP支付订单，并返回支付页面。
   * @param appKey  (required)
   * @param alipayCreateOrderWapPayRequest  (optional)
   * @return StringApiResponse
   * @throws ApiException if fails to make API call
   */
  public StringApiResponse alipayCreateOrderWapPay(String appKey, AlipayCreateOrderWapPayRequest alipayCreateOrderWapPayRequest) throws ApiException {
    ApiResponse<StringApiResponse> localVarResponse = alipayCreateOrderWapPayWithHttpInfo(appKey, alipayCreateOrderWapPayRequest);
    return localVarResponse.getData();
  }

  /**
   * 创建WAP支付订单
   * 创建一个WAP支付订单，并返回支付页面。
   * @param appKey  (required)
   * @param alipayCreateOrderWapPayRequest  (optional)
   * @return ApiResponse&lt;StringApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<StringApiResponse> alipayCreateOrderWapPayWithHttpInfo(String appKey, AlipayCreateOrderWapPayRequest alipayCreateOrderWapPayRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = alipayCreateOrderWapPayRequestBuilder(appKey, alipayCreateOrderWapPayRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("alipayCreateOrderWapPay", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<StringApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<StringApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<StringApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder alipayCreateOrderWapPayRequestBuilder(String appKey, AlipayCreateOrderWapPayRequest alipayCreateOrderWapPayRequest) throws ApiException {
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling alipayCreateOrderWapPay");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Alipay/{appKey}/CreateOrderWapPay"
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json-patch+json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(alipayCreateOrderWapPayRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 获取订单详情
   * 查询订单详情，包括订单状态和支付信息。
   * @param appKey  (required)
   * @param orderNo 订单号 (optional)
   * @return AlipayTradeQueryResponseApiResponse
   * @throws ApiException if fails to make API call
   */
  public AlipayTradeQueryResponseApiResponse alipayOrderDetail(String appKey, String orderNo) throws ApiException {
    ApiResponse<AlipayTradeQueryResponseApiResponse> localVarResponse = alipayOrderDetailWithHttpInfo(appKey, orderNo);
    return localVarResponse.getData();
  }

  /**
   * 获取订单详情
   * 查询订单详情，包括订单状态和支付信息。
   * @param appKey  (required)
   * @param orderNo 订单号 (optional)
   * @return ApiResponse&lt;AlipayTradeQueryResponseApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AlipayTradeQueryResponseApiResponse> alipayOrderDetailWithHttpInfo(String appKey, String orderNo) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = alipayOrderDetailRequestBuilder(appKey, orderNo);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("alipayOrderDetail", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<AlipayTradeQueryResponseApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<AlipayTradeQueryResponseApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<AlipayTradeQueryResponseApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder alipayOrderDetailRequestBuilder(String appKey, String orderNo) throws ApiException {
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling alipayOrderDetail");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Alipay/{appKey}/OrderDetail"
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "orderNo";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("orderNo", orderNo));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 发起订单退款
   * 对指定订单进行退款操作。
   * @param appKey  (required)
   * @param amount 退款金额 (optional)
   * @param orderNo 订单号 (optional)
   * @return AlipayTradeRefundResponseApiResponse
   * @throws ApiException if fails to make API call
   */
  public AlipayTradeRefundResponseApiResponse alipayOrderRefund(String appKey, String amount, String orderNo) throws ApiException {
    ApiResponse<AlipayTradeRefundResponseApiResponse> localVarResponse = alipayOrderRefundWithHttpInfo(appKey, amount, orderNo);
    return localVarResponse.getData();
  }

  /**
   * 发起订单退款
   * 对指定订单进行退款操作。
   * @param appKey  (required)
   * @param amount 退款金额 (optional)
   * @param orderNo 订单号 (optional)
   * @return ApiResponse&lt;AlipayTradeRefundResponseApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AlipayTradeRefundResponseApiResponse> alipayOrderRefundWithHttpInfo(String appKey, String amount, String orderNo) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = alipayOrderRefundRequestBuilder(appKey, amount, orderNo);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("alipayOrderRefund", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<AlipayTradeRefundResponseApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<AlipayTradeRefundResponseApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<AlipayTradeRefundResponseApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder alipayOrderRefundRequestBuilder(String appKey, String amount, String orderNo) throws ApiException {
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling alipayOrderRefund");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Alipay/{appKey}/OrderRefund"
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "amount";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("amount", amount));
    localVarQueryParameterBaseName = "orderNo";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("orderNo", orderNo));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 支付成功回调通知
   * 处理支付宝支付成功的同步通知。
   * @param appKey  (required)
   * @param returnPageNotifyRequest  (optional)
   * @return BooleanApiResponse
   * @throws ApiException if fails to make API call
   */
  public BooleanApiResponse alipayReturnPageNotify(String appKey, ReturnPageNotifyRequest returnPageNotifyRequest) throws ApiException {
    ApiResponse<BooleanApiResponse> localVarResponse = alipayReturnPageNotifyWithHttpInfo(appKey, returnPageNotifyRequest);
    return localVarResponse.getData();
  }

  /**
   * 支付成功回调通知
   * 处理支付宝支付成功的同步通知。
   * @param appKey  (required)
   * @param returnPageNotifyRequest  (optional)
   * @return ApiResponse&lt;BooleanApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BooleanApiResponse> alipayReturnPageNotifyWithHttpInfo(String appKey, ReturnPageNotifyRequest returnPageNotifyRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = alipayReturnPageNotifyRequestBuilder(appKey, returnPageNotifyRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("alipayReturnPageNotify", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<BooleanApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<BooleanApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<BooleanApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder alipayReturnPageNotifyRequestBuilder(String appKey, ReturnPageNotifyRequest returnPageNotifyRequest) throws ApiException {
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling alipayReturnPageNotify");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/Alipay/{appKey}/ReturnPageNotify"
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json-patch+json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(returnPageNotifyRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

}
