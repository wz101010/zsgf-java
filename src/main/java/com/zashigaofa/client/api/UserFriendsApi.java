/*
 * 用户全部 API 文档
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.zashigaofa.client.api;

import com.zashigaofa.client.ApiClient;
import com.zashigaofa.client.ApiException;
import com.zashigaofa.client.ApiResponse;
import com.zashigaofa.client.Configuration;
import com.zashigaofa.client.Pair;

import com.zashigaofa.client.model.BooleanApiResponse;
import com.zashigaofa.client.model.FollowerPutModel;
import com.zashigaofa.client.model.GetUserProfileResultApiResponse;
import com.zashigaofa.client.model.UserCommonInterestsResultApiResponse;
import com.zashigaofa.client.model.UserFollowersResultApiResponse;
import com.zashigaofa.client.model.UserFriendsNearByResultApiResponse;
import com.zashigaofa.client.model.UserMutualFollowersResultApiResponse;
import com.zashigaofa.client.model.UserMutualFollowingsResultApiResponse;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import org.apache.http.HttpEntity;
import org.apache.http.NameValuePair;
import org.apache.http.entity.mime.MultipartEntityBuilder;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-18T07:36:52.198638406Z[Etc/UTC]", comments = "Generator version: 7.13.0-SNAPSHOT")
public class UserFriendsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public UserFriendsApi() {
    this(Configuration.getDefaultApiClient());
  }

  public UserFriendsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * 推荐相似兴趣用户
   * 推荐有共同爱好的用户
   * @param appKey  (required)
   * @param tag 兴趣标签 (optional)
   * @param skip 跳过的记录数 (optional, default to 0)
   * @param take 获取的记录数 (optional, default to 10)
   * @return UserCommonInterestsResultApiResponse
   * @throws ApiException if fails to make API call
   */
  public UserCommonInterestsResultApiResponse userCommonInterests(String appKey, String tag, Integer skip, Integer take) throws ApiException {
    ApiResponse<UserCommonInterestsResultApiResponse> localVarResponse = userCommonInterestsWithHttpInfo(appKey, tag, skip, take);
    return localVarResponse.getData();
  }

  /**
   * 推荐相似兴趣用户
   * 推荐有共同爱好的用户
   * @param appKey  (required)
   * @param tag 兴趣标签 (optional)
   * @param skip 跳过的记录数 (optional, default to 0)
   * @param take 获取的记录数 (optional, default to 10)
   * @return ApiResponse&lt;UserCommonInterestsResultApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<UserCommonInterestsResultApiResponse> userCommonInterestsWithHttpInfo(String appKey, String tag, Integer skip, Integer take) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = userCommonInterestsRequestBuilder(appKey, tag, skip, take);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("userCommonInterests", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<UserCommonInterestsResultApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<UserCommonInterestsResultApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<UserCommonInterestsResultApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder userCommonInterestsRequestBuilder(String appKey, String tag, Integer skip, Integer take) throws ApiException {
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling userCommonInterests");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/UserFriends/{appKey}/CommonInterests"
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "tag";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParameterBaseName = "skip";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("skip", skip));
    localVarQueryParameterBaseName = "take";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("take", take));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 添加关注
   * 关注指定用户
   * @param userId 要关注的用户ID (required)
   * @param appKey  (required)
   * @return BooleanApiResponse
   * @throws ApiException if fails to make API call
   */
  public BooleanApiResponse userFollowUser(Long userId, String appKey) throws ApiException {
    ApiResponse<BooleanApiResponse> localVarResponse = userFollowUserWithHttpInfo(userId, appKey);
    return localVarResponse.getData();
  }

  /**
   * 添加关注
   * 关注指定用户
   * @param userId 要关注的用户ID (required)
   * @param appKey  (required)
   * @return ApiResponse&lt;BooleanApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BooleanApiResponse> userFollowUserWithHttpInfo(Long userId, String appKey) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = userFollowUserRequestBuilder(userId, appKey);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("userFollowUser", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<BooleanApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<BooleanApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<BooleanApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder userFollowUserRequestBuilder(Long userId, String appKey) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
      throw new ApiException(400, "Missing the required parameter 'userId' when calling userFollowUser");
    }
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling userFollowUser");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/UserFriends/{appKey}/Follower/{userId}"
        .replace("{userId}", ApiClient.urlEncode(userId.toString()))
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 刷新粉丝数据
   * 根据粉丝ID更新粉丝信息
   * @param id 粉丝ID (required)
   * @param appKey  (required)
   * @param followerPutModel 更新粉丝的请求参数 (optional)
   * @return BooleanApiResponse
   * @throws ApiException if fails to make API call
   */
  public BooleanApiResponse userFollowerPut(Long id, String appKey, FollowerPutModel followerPutModel) throws ApiException {
    ApiResponse<BooleanApiResponse> localVarResponse = userFollowerPutWithHttpInfo(id, appKey, followerPutModel);
    return localVarResponse.getData();
  }

  /**
   * 刷新粉丝数据
   * 根据粉丝ID更新粉丝信息
   * @param id 粉丝ID (required)
   * @param appKey  (required)
   * @param followerPutModel 更新粉丝的请求参数 (optional)
   * @return ApiResponse&lt;BooleanApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BooleanApiResponse> userFollowerPutWithHttpInfo(Long id, String appKey, FollowerPutModel followerPutModel) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = userFollowerPutRequestBuilder(id, appKey, followerPutModel);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("userFollowerPut", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<BooleanApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<BooleanApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<BooleanApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder userFollowerPutRequestBuilder(Long id, String appKey, FollowerPutModel followerPutModel) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling userFollowerPut");
    }
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling userFollowerPut");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/UserFriends/{appKey}/Follower/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()))
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json-patch+json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(followerPutModel);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 获取粉丝列表
   * 根据条件获取我的粉丝列表
   * @param appKey  (required)
   * @param tag 标签 (optional)
   * @param status 状态 (optional)
   * @param targetUserId 指定用户的粉丝 (optional, default to 0)
   * @param skip 跳过的记录数 (optional, default to 0)
   * @param take 获取的记录数 (optional, default to 10)
   * @return UserFollowersResultApiResponse
   * @throws ApiException if fails to make API call
   */
  public UserFollowersResultApiResponse userFollowers(String appKey, String tag, String status, Long targetUserId, Integer skip, Integer take) throws ApiException {
    ApiResponse<UserFollowersResultApiResponse> localVarResponse = userFollowersWithHttpInfo(appKey, tag, status, targetUserId, skip, take);
    return localVarResponse.getData();
  }

  /**
   * 获取粉丝列表
   * 根据条件获取我的粉丝列表
   * @param appKey  (required)
   * @param tag 标签 (optional)
   * @param status 状态 (optional)
   * @param targetUserId 指定用户的粉丝 (optional, default to 0)
   * @param skip 跳过的记录数 (optional, default to 0)
   * @param take 获取的记录数 (optional, default to 10)
   * @return ApiResponse&lt;UserFollowersResultApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<UserFollowersResultApiResponse> userFollowersWithHttpInfo(String appKey, String tag, String status, Long targetUserId, Integer skip, Integer take) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = userFollowersRequestBuilder(appKey, tag, status, targetUserId, skip, take);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("userFollowers", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<UserFollowersResultApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<UserFollowersResultApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<UserFollowersResultApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder userFollowersRequestBuilder(String appKey, String tag, String status, Long targetUserId, Integer skip, Integer take) throws ApiException {
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling userFollowers");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/UserFriends/{appKey}/Followers"
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "tag";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParameterBaseName = "status";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("status", status));
    localVarQueryParameterBaseName = "targetUserId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("targetUserId", targetUserId));
    localVarQueryParameterBaseName = "skip";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("skip", skip));
    localVarQueryParameterBaseName = "take";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("take", take));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 获取关注列表 / 判断是否关注
   * 根据条件获取我的关注列表，或判断是否关注某个用户
   * @param appKey  (required)
   * @param tag 用于过滤关注列表的标签（可选）。 (optional)
   * @param status 用于过滤关注列表的状态（可选）。 (optional)
   * @param targetUserId 指定用户的关注记录，如果不提供则默认为当前用户的关注。 (optional, default to 0)
   * @param skip 跳过的记录数，用于分页（默认0）。 (optional, default to 0)
   * @param take 获取的记录数，用于分页（默认10）。 (optional, default to 10)
   * @param checkUserId 要判断是否关注的目标用户ID。如果提供此参数，方法将返回一个布尔值，表示当前用户是否关注该目标用户。 (optional)
   * @param onlyIDs 是否只返回关注用户的ID集合，默认为false（即返回完整的关注用户信息）。 (optional, default to false)
   * @return BooleanApiResponse
   * @throws ApiException if fails to make API call
   */
  public BooleanApiResponse userFollowing(String appKey, String tag, String status, Long targetUserId, Integer skip, Integer take, Long checkUserId, Boolean onlyIDs) throws ApiException {
    ApiResponse<BooleanApiResponse> localVarResponse = userFollowingWithHttpInfo(appKey, tag, status, targetUserId, skip, take, checkUserId, onlyIDs);
    return localVarResponse.getData();
  }

  /**
   * 获取关注列表 / 判断是否关注
   * 根据条件获取我的关注列表，或判断是否关注某个用户
   * @param appKey  (required)
   * @param tag 用于过滤关注列表的标签（可选）。 (optional)
   * @param status 用于过滤关注列表的状态（可选）。 (optional)
   * @param targetUserId 指定用户的关注记录，如果不提供则默认为当前用户的关注。 (optional, default to 0)
   * @param skip 跳过的记录数，用于分页（默认0）。 (optional, default to 0)
   * @param take 获取的记录数，用于分页（默认10）。 (optional, default to 10)
   * @param checkUserId 要判断是否关注的目标用户ID。如果提供此参数，方法将返回一个布尔值，表示当前用户是否关注该目标用户。 (optional)
   * @param onlyIDs 是否只返回关注用户的ID集合，默认为false（即返回完整的关注用户信息）。 (optional, default to false)
   * @return ApiResponse&lt;BooleanApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BooleanApiResponse> userFollowingWithHttpInfo(String appKey, String tag, String status, Long targetUserId, Integer skip, Integer take, Long checkUserId, Boolean onlyIDs) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = userFollowingRequestBuilder(appKey, tag, status, targetUserId, skip, take, checkUserId, onlyIDs);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("userFollowing", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<BooleanApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<BooleanApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<BooleanApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder userFollowingRequestBuilder(String appKey, String tag, String status, Long targetUserId, Integer skip, Integer take, Long checkUserId, Boolean onlyIDs) throws ApiException {
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling userFollowing");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/UserFriends/{appKey}/Following"
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "tag";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParameterBaseName = "status";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("status", status));
    localVarQueryParameterBaseName = "targetUserId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("targetUserId", targetUserId));
    localVarQueryParameterBaseName = "skip";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("skip", skip));
    localVarQueryParameterBaseName = "take";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("take", take));
    localVarQueryParameterBaseName = "checkUserId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("checkUserId", checkUserId));
    localVarQueryParameterBaseName = "onlyIDs";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("onlyIDs", onlyIDs));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 推荐附近用户
   * 根据地理位置坐标和多种筛选条件，查询附近满足条件的用户列表，支持分页和按距离排序。 地理位置查询使用MySQL的ST_Distance_Sphere函数计算球面距离。 注意：longitude为经度(X轴)，latitude为纬度(Y轴)，参数顺序与常规坐标系一致
   * @param longitude 当前用户经度坐标(WGS84坐标系) (required)
   * @param latitude 当前用户纬度坐标(WGS84坐标系) (required)
   * @param appKey  (required)
   * @param country 国家过滤条件（精确匹配） (optional)
   * @param state 省份过滤条件（精确匹配） (optional)
   * @param city 城市过滤条件（精确匹配） (optional)
   * @param district 区县过滤条件（精确匹配） (optional)
   * @param gender 性别过滤条件（可选值示例：Male/Female/Other） (optional)
   * @param ageS 年龄起始范围（包含，0表示不限制） (optional)
   * @param ageE 年龄结束范围（包含，0表示不限制） (optional)
   * @param tag 兴趣标签过滤（支持模糊匹配，如：\&quot;运动\&quot;） (optional)
   * @param distance 搜索半径（单位：米，0表示不限制距离） (optional, default to 0)
   * @param skip 跳过的记录数（分页起始位置，默认0） (optional, default to 0)
   * @param take 获取的记录数（分页大小，默认10，最大100） (optional, default to 10)
   * @return UserFriendsNearByResultApiResponse
   * @throws ApiException if fails to make API call
   */
  public UserFriendsNearByResultApiResponse userFriendsNearBy(Double longitude, Double latitude, String appKey, String country, String state, String city, String district, String gender, Integer ageS, Integer ageE, String tag, Long distance, Integer skip, Integer take) throws ApiException {
    ApiResponse<UserFriendsNearByResultApiResponse> localVarResponse = userFriendsNearByWithHttpInfo(longitude, latitude, appKey, country, state, city, district, gender, ageS, ageE, tag, distance, skip, take);
    return localVarResponse.getData();
  }

  /**
   * 推荐附近用户
   * 根据地理位置坐标和多种筛选条件，查询附近满足条件的用户列表，支持分页和按距离排序。 地理位置查询使用MySQL的ST_Distance_Sphere函数计算球面距离。 注意：longitude为经度(X轴)，latitude为纬度(Y轴)，参数顺序与常规坐标系一致
   * @param longitude 当前用户经度坐标(WGS84坐标系) (required)
   * @param latitude 当前用户纬度坐标(WGS84坐标系) (required)
   * @param appKey  (required)
   * @param country 国家过滤条件（精确匹配） (optional)
   * @param state 省份过滤条件（精确匹配） (optional)
   * @param city 城市过滤条件（精确匹配） (optional)
   * @param district 区县过滤条件（精确匹配） (optional)
   * @param gender 性别过滤条件（可选值示例：Male/Female/Other） (optional)
   * @param ageS 年龄起始范围（包含，0表示不限制） (optional)
   * @param ageE 年龄结束范围（包含，0表示不限制） (optional)
   * @param tag 兴趣标签过滤（支持模糊匹配，如：\&quot;运动\&quot;） (optional)
   * @param distance 搜索半径（单位：米，0表示不限制距离） (optional, default to 0)
   * @param skip 跳过的记录数（分页起始位置，默认0） (optional, default to 0)
   * @param take 获取的记录数（分页大小，默认10，最大100） (optional, default to 10)
   * @return ApiResponse&lt;UserFriendsNearByResultApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<UserFriendsNearByResultApiResponse> userFriendsNearByWithHttpInfo(Double longitude, Double latitude, String appKey, String country, String state, String city, String district, String gender, Integer ageS, Integer ageE, String tag, Long distance, Integer skip, Integer take) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = userFriendsNearByRequestBuilder(longitude, latitude, appKey, country, state, city, district, gender, ageS, ageE, tag, distance, skip, take);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("userFriendsNearBy", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<UserFriendsNearByResultApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<UserFriendsNearByResultApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<UserFriendsNearByResultApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder userFriendsNearByRequestBuilder(Double longitude, Double latitude, String appKey, String country, String state, String city, String district, String gender, Integer ageS, Integer ageE, String tag, Long distance, Integer skip, Integer take) throws ApiException {
    // verify the required parameter 'longitude' is set
    if (longitude == null) {
      throw new ApiException(400, "Missing the required parameter 'longitude' when calling userFriendsNearBy");
    }
    // verify the required parameter 'latitude' is set
    if (latitude == null) {
      throw new ApiException(400, "Missing the required parameter 'latitude' when calling userFriendsNearBy");
    }
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling userFriendsNearBy");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/UserFriends/{appKey}/NearBy"
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "longitude";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("longitude", longitude));
    localVarQueryParameterBaseName = "latitude";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("latitude", latitude));
    localVarQueryParameterBaseName = "country";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("country", country));
    localVarQueryParameterBaseName = "state";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("state", state));
    localVarQueryParameterBaseName = "city";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("city", city));
    localVarQueryParameterBaseName = "district";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("district", district));
    localVarQueryParameterBaseName = "gender";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("gender", gender));
    localVarQueryParameterBaseName = "ageS";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ageS", ageS));
    localVarQueryParameterBaseName = "ageE";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ageE", ageE));
    localVarQueryParameterBaseName = "tag";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag", tag));
    localVarQueryParameterBaseName = "distance";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("distance", distance));
    localVarQueryParameterBaseName = "skip";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("skip", skip));
    localVarQueryParameterBaseName = "take";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("take", take));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 推荐共同粉丝用户
   * 推荐有共同粉丝的用户
   * @param appKey  (required)
   * @param skip 跳过的记录数 (optional, default to 0)
   * @param take 获取的记录数 (optional, default to 10)
   * @return UserMutualFollowersResultApiResponse
   * @throws ApiException if fails to make API call
   */
  public UserMutualFollowersResultApiResponse userMutualFollowers(String appKey, Integer skip, Integer take) throws ApiException {
    ApiResponse<UserMutualFollowersResultApiResponse> localVarResponse = userMutualFollowersWithHttpInfo(appKey, skip, take);
    return localVarResponse.getData();
  }

  /**
   * 推荐共同粉丝用户
   * 推荐有共同粉丝的用户
   * @param appKey  (required)
   * @param skip 跳过的记录数 (optional, default to 0)
   * @param take 获取的记录数 (optional, default to 10)
   * @return ApiResponse&lt;UserMutualFollowersResultApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<UserMutualFollowersResultApiResponse> userMutualFollowersWithHttpInfo(String appKey, Integer skip, Integer take) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = userMutualFollowersRequestBuilder(appKey, skip, take);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("userMutualFollowers", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<UserMutualFollowersResultApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<UserMutualFollowersResultApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<UserMutualFollowersResultApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder userMutualFollowersRequestBuilder(String appKey, Integer skip, Integer take) throws ApiException {
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling userMutualFollowers");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/UserFriends/{appKey}/MutualFollowers"
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "skip";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("skip", skip));
    localVarQueryParameterBaseName = "take";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("take", take));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 推荐共同关注用户
   * 推荐有共同关注的用户
   * @param appKey  (required)
   * @param skip 跳过的记录数 (optional, default to 0)
   * @param take 获取的记录数 (optional, default to 10)
   * @return UserMutualFollowingsResultApiResponse
   * @throws ApiException if fails to make API call
   */
  public UserMutualFollowingsResultApiResponse userMutualFollowings(String appKey, Integer skip, Integer take) throws ApiException {
    ApiResponse<UserMutualFollowingsResultApiResponse> localVarResponse = userMutualFollowingsWithHttpInfo(appKey, skip, take);
    return localVarResponse.getData();
  }

  /**
   * 推荐共同关注用户
   * 推荐有共同关注的用户
   * @param appKey  (required)
   * @param skip 跳过的记录数 (optional, default to 0)
   * @param take 获取的记录数 (optional, default to 10)
   * @return ApiResponse&lt;UserMutualFollowingsResultApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<UserMutualFollowingsResultApiResponse> userMutualFollowingsWithHttpInfo(String appKey, Integer skip, Integer take) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = userMutualFollowingsRequestBuilder(appKey, skip, take);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("userMutualFollowings", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<UserMutualFollowingsResultApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<UserMutualFollowingsResultApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<UserMutualFollowingsResultApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder userMutualFollowingsRequestBuilder(String appKey, Integer skip, Integer take) throws ApiException {
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling userMutualFollowings");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/UserFriends/{appKey}/MutualFollowings"
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "skip";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("skip", skip));
    localVarQueryParameterBaseName = "take";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("take", take));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 获取用户资料
   * 用于他人主页展示
   * @param userId 用户ID (required)
   * @param appKey  (required)
   * @return GetUserProfileResultApiResponse
   * @throws ApiException if fails to make API call
   */
  public GetUserProfileResultApiResponse userProfileById(Long userId, String appKey) throws ApiException {
    ApiResponse<GetUserProfileResultApiResponse> localVarResponse = userProfileByIdWithHttpInfo(userId, appKey);
    return localVarResponse.getData();
  }

  /**
   * 获取用户资料
   * 用于他人主页展示
   * @param userId 用户ID (required)
   * @param appKey  (required)
   * @return ApiResponse&lt;GetUserProfileResultApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetUserProfileResultApiResponse> userProfileByIdWithHttpInfo(Long userId, String appKey) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = userProfileByIdRequestBuilder(userId, appKey);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("userProfileById", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<GetUserProfileResultApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<GetUserProfileResultApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<GetUserProfileResultApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder userProfileByIdRequestBuilder(Long userId, String appKey) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
      throw new ApiException(400, "Missing the required parameter 'userId' when calling userProfileById");
    }
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling userProfileById");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/UserFriends/{appKey}/Profile/{userId}"
        .replace("{userId}", ApiClient.urlEncode(userId.toString()))
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 取消关注
   * 取消关注指定用户
   * @param userId 要取消关注的用户ID (required)
   * @param appKey  (required)
   * @return BooleanApiResponse
   * @throws ApiException if fails to make API call
   */
  public BooleanApiResponse userUnfollowUser(Long userId, String appKey) throws ApiException {
    ApiResponse<BooleanApiResponse> localVarResponse = userUnfollowUserWithHttpInfo(userId, appKey);
    return localVarResponse.getData();
  }

  /**
   * 取消关注
   * 取消关注指定用户
   * @param userId 要取消关注的用户ID (required)
   * @param appKey  (required)
   * @return ApiResponse&lt;BooleanApiResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<BooleanApiResponse> userUnfollowUserWithHttpInfo(Long userId, String appKey) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = userUnfollowUserRequestBuilder(userId, appKey);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("userUnfollowUser", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<BooleanApiResponse>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<BooleanApiResponse>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<BooleanApiResponse>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder userUnfollowUserRequestBuilder(Long userId, String appKey) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
      throw new ApiException(400, "Missing the required parameter 'userId' when calling userUnfollowUser");
    }
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling userUnfollowUser");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/UserFriends/{appKey}/Follower/{userId}"
        .replace("{userId}", ApiClient.urlEncode(userId.toString()))
        .replace("{appKey}", ApiClient.urlEncode(appKey.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

}
