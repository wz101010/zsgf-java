/*
 * 用户全部 API 文档
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.zashigaofa.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.zashigaofa.client.ApiClient;
/**
 * ExchangeCurrencyRequest
 */
@JsonPropertyOrder({
  ExchangeCurrencyRequest.JSON_PROPERTY_FROM_CURRENCY,
  ExchangeCurrencyRequest.JSON_PROPERTY_CURRENCY,
  ExchangeCurrencyRequest.JSON_PROPERTY_BALANCE,
  ExchangeCurrencyRequest.JSON_PROPERTY_REMARK,
  ExchangeCurrencyRequest.JSON_PROPERTY_DESCRIPTION,
  ExchangeCurrencyRequest.JSON_PROPERTY_TAGS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-18T07:36:52.198638406Z[Etc/UTC]", comments = "Generator version: 7.13.0-SNAPSHOT")
public class ExchangeCurrencyRequest {
  public static final String JSON_PROPERTY_FROM_CURRENCY = "fromCurrency";
  @javax.annotation.Nonnull
  private String fromCurrency;

  public static final String JSON_PROPERTY_CURRENCY = "currency";
  @javax.annotation.Nonnull
  private String currency;

  public static final String JSON_PROPERTY_BALANCE = "balance";
  @javax.annotation.Nonnull
  private Integer balance;

  public static final String JSON_PROPERTY_REMARK = "remark";
  private JsonNullable<String> remark = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private JsonNullable<String> description = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_TAGS = "tags";
  private JsonNullable<String> tags = JsonNullable.<String>undefined();

  public ExchangeCurrencyRequest() { 
  }

  public ExchangeCurrencyRequest fromCurrency(@javax.annotation.Nonnull String fromCurrency) {
    this.fromCurrency = fromCurrency;
    return this;
  }

  /**
   * 源虚拟币代码
   * @return fromCurrency
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FROM_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getFromCurrency() {
    return fromCurrency;
  }


  @JsonProperty(JSON_PROPERTY_FROM_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFromCurrency(@javax.annotation.Nonnull String fromCurrency) {
    this.fromCurrency = fromCurrency;
  }


  public ExchangeCurrencyRequest currency(@javax.annotation.Nonnull String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * 目标虚拟币代码
   * @return currency
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getCurrency() {
    return currency;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCurrency(@javax.annotation.Nonnull String currency) {
    this.currency = currency;
  }


  public ExchangeCurrencyRequest balance(@javax.annotation.Nonnull Integer balance) {
    this.balance = balance;
    return this;
  }

  /**
   * 兑换额
   * @return balance
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BALANCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Integer getBalance() {
    return balance;
  }


  @JsonProperty(JSON_PROPERTY_BALANCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBalance(@javax.annotation.Nonnull Integer balance) {
    this.balance = balance;
  }


  public ExchangeCurrencyRequest remark(@javax.annotation.Nullable String remark) {
    this.remark = JsonNullable.<String>of(remark);
    return this;
  }

  /**
   * 备注
   * @return remark
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getRemark() {
        return remark.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_REMARK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getRemark_JsonNullable() {
    return remark;
  }
  
  @JsonProperty(JSON_PROPERTY_REMARK)
  public void setRemark_JsonNullable(JsonNullable<String> remark) {
    this.remark = remark;
  }

  public void setRemark(@javax.annotation.Nullable String remark) {
    this.remark = JsonNullable.<String>of(remark);
  }


  public ExchangeCurrencyRequest description(@javax.annotation.Nullable String description) {
    this.description = JsonNullable.<String>of(description);
    return this;
  }

  /**
   * 描述
   * @return description
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getDescription() {
        return description.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getDescription_JsonNullable() {
    return description;
  }
  
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  public void setDescription_JsonNullable(JsonNullable<String> description) {
    this.description = description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = JsonNullable.<String>of(description);
  }


  public ExchangeCurrencyRequest tags(@javax.annotation.Nullable String tags) {
    this.tags = JsonNullable.<String>of(tags);
    return this;
  }

  /**
   * 标签
   * @return tags
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getTags() {
        return tags.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getTags_JsonNullable() {
    return tags;
  }
  
  @JsonProperty(JSON_PROPERTY_TAGS)
  public void setTags_JsonNullable(JsonNullable<String> tags) {
    this.tags = tags;
  }

  public void setTags(@javax.annotation.Nullable String tags) {
    this.tags = JsonNullable.<String>of(tags);
  }


  /**
   * Return true if this ExchangeCurrencyRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExchangeCurrencyRequest exchangeCurrencyRequest = (ExchangeCurrencyRequest) o;
    return Objects.equals(this.fromCurrency, exchangeCurrencyRequest.fromCurrency) &&
        Objects.equals(this.currency, exchangeCurrencyRequest.currency) &&
        Objects.equals(this.balance, exchangeCurrencyRequest.balance) &&
        equalsNullable(this.remark, exchangeCurrencyRequest.remark) &&
        equalsNullable(this.description, exchangeCurrencyRequest.description) &&
        equalsNullable(this.tags, exchangeCurrencyRequest.tags);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(fromCurrency, currency, balance, hashCodeNullable(remark), hashCodeNullable(description), hashCodeNullable(tags));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExchangeCurrencyRequest {\n");
    sb.append("    fromCurrency: ").append(toIndentedString(fromCurrency)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    remark: ").append(toIndentedString(remark)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `fromCurrency` to the URL query string
    if (getFromCurrency() != null) {
      joiner.add(String.format("%sfromCurrency%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getFromCurrency()))));
    }

    // add `currency` to the URL query string
    if (getCurrency() != null) {
      joiner.add(String.format("%scurrency%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getCurrency()))));
    }

    // add `balance` to the URL query string
    if (getBalance() != null) {
      joiner.add(String.format("%sbalance%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getBalance()))));
    }

    // add `remark` to the URL query string
    if (getRemark() != null) {
      joiner.add(String.format("%sremark%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getRemark()))));
    }

    // add `description` to the URL query string
    if (getDescription() != null) {
      joiner.add(String.format("%sdescription%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDescription()))));
    }

    // add `tags` to the URL query string
    if (getTags() != null) {
      joiner.add(String.format("%stags%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTags()))));
    }

    return joiner.toString();
  }
}

