/*
 * 用户全部 API 文档
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.zashigaofa.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.zashigaofa.client.model.DirectoryItem;
import com.zashigaofa.client.model.FileItem;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.zashigaofa.client.ApiClient;
/**
 * FileListResult
 */
@JsonPropertyOrder({
  FileListResult.JSON_PROPERTY_DIRECTORIES,
  FileListResult.JSON_PROPERTY_FILES,
  FileListResult.JSON_PROPERTY_TOTAL_DIRECTORIES,
  FileListResult.JSON_PROPERTY_TOTAL_FILES,
  FileListResult.JSON_PROPERTY_SIZE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-18T07:36:52.198638406Z[Etc/UTC]", comments = "Generator version: 7.13.0-SNAPSHOT")
public class FileListResult {
  public static final String JSON_PROPERTY_DIRECTORIES = "directories";
  private JsonNullable<List<DirectoryItem>> directories = JsonNullable.<List<DirectoryItem>>undefined();

  public static final String JSON_PROPERTY_FILES = "files";
  private JsonNullable<List<FileItem>> files = JsonNullable.<List<FileItem>>undefined();

  public static final String JSON_PROPERTY_TOTAL_DIRECTORIES = "totalDirectories";
  @javax.annotation.Nullable
  private Integer totalDirectories;

  public static final String JSON_PROPERTY_TOTAL_FILES = "totalFiles";
  @javax.annotation.Nullable
  private Integer totalFiles;

  public static final String JSON_PROPERTY_SIZE = "size";
  @javax.annotation.Nullable
  private Long size;

  public FileListResult() { 
  }

  public FileListResult directories(@javax.annotation.Nullable List<DirectoryItem> directories) {
    this.directories = JsonNullable.<List<DirectoryItem>>of(directories);
    return this;
  }

  public FileListResult addDirectoriesItem(DirectoryItem directoriesItem) {
    if (this.directories == null || !this.directories.isPresent()) {
      this.directories = JsonNullable.<List<DirectoryItem>>of(new ArrayList<>());
    }
    try {
      this.directories.get().add(directoriesItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Get directories
   * @return directories
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public List<DirectoryItem> getDirectories() {
        return directories.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DIRECTORIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<DirectoryItem>> getDirectories_JsonNullable() {
    return directories;
  }
  
  @JsonProperty(JSON_PROPERTY_DIRECTORIES)
  public void setDirectories_JsonNullable(JsonNullable<List<DirectoryItem>> directories) {
    this.directories = directories;
  }

  public void setDirectories(@javax.annotation.Nullable List<DirectoryItem> directories) {
    this.directories = JsonNullable.<List<DirectoryItem>>of(directories);
  }


  public FileListResult files(@javax.annotation.Nullable List<FileItem> files) {
    this.files = JsonNullable.<List<FileItem>>of(files);
    return this;
  }

  public FileListResult addFilesItem(FileItem filesItem) {
    if (this.files == null || !this.files.isPresent()) {
      this.files = JsonNullable.<List<FileItem>>of(new ArrayList<>());
    }
    try {
      this.files.get().add(filesItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Get files
   * @return files
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public List<FileItem> getFiles() {
        return files.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<FileItem>> getFiles_JsonNullable() {
    return files;
  }
  
  @JsonProperty(JSON_PROPERTY_FILES)
  public void setFiles_JsonNullable(JsonNullable<List<FileItem>> files) {
    this.files = files;
  }

  public void setFiles(@javax.annotation.Nullable List<FileItem> files) {
    this.files = JsonNullable.<List<FileItem>>of(files);
  }


  public FileListResult totalDirectories(@javax.annotation.Nullable Integer totalDirectories) {
    this.totalDirectories = totalDirectories;
    return this;
  }

  /**
   * Get totalDirectories
   * @return totalDirectories
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL_DIRECTORIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getTotalDirectories() {
    return totalDirectories;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_DIRECTORIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalDirectories(@javax.annotation.Nullable Integer totalDirectories) {
    this.totalDirectories = totalDirectories;
  }


  public FileListResult totalFiles(@javax.annotation.Nullable Integer totalFiles) {
    this.totalFiles = totalFiles;
    return this;
  }

  /**
   * Get totalFiles
   * @return totalFiles
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL_FILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getTotalFiles() {
    return totalFiles;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_FILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalFiles(@javax.annotation.Nullable Integer totalFiles) {
    this.totalFiles = totalFiles;
  }


  public FileListResult size(@javax.annotation.Nullable Long size) {
    this.size = size;
    return this;
  }

  /**
   * Get size
   * @return size
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getSize() {
    return size;
  }


  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSize(@javax.annotation.Nullable Long size) {
    this.size = size;
  }


  /**
   * Return true if this FileListResult object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileListResult fileListResult = (FileListResult) o;
    return equalsNullable(this.directories, fileListResult.directories) &&
        equalsNullable(this.files, fileListResult.files) &&
        Objects.equals(this.totalDirectories, fileListResult.totalDirectories) &&
        Objects.equals(this.totalFiles, fileListResult.totalFiles) &&
        Objects.equals(this.size, fileListResult.size);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(directories), hashCodeNullable(files), totalDirectories, totalFiles, size);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileListResult {\n");
    sb.append("    directories: ").append(toIndentedString(directories)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    totalDirectories: ").append(toIndentedString(totalDirectories)).append("\n");
    sb.append("    totalFiles: ").append(toIndentedString(totalFiles)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `directories` to the URL query string
    if (getDirectories() != null) {
      for (int i = 0; i < getDirectories().size(); i++) {
        if (getDirectories().get(i) != null) {
          joiner.add(getDirectories().get(i).toUrlQueryString(String.format("%sdirectories%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `files` to the URL query string
    if (getFiles() != null) {
      for (int i = 0; i < getFiles().size(); i++) {
        if (getFiles().get(i) != null) {
          joiner.add(getFiles().get(i).toUrlQueryString(String.format("%sfiles%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `totalDirectories` to the URL query string
    if (getTotalDirectories() != null) {
      joiner.add(String.format("%stotalDirectories%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTotalDirectories()))));
    }

    // add `totalFiles` to the URL query string
    if (getTotalFiles() != null) {
      joiner.add(String.format("%stotalFiles%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTotalFiles()))));
    }

    // add `size` to the URL query string
    if (getSize() != null) {
      joiner.add(String.format("%ssize%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getSize()))));
    }

    return joiner.toString();
  }
}

