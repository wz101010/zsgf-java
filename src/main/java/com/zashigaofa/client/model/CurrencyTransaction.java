/*
 * 用户全部 API 文档
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.zashigaofa.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.zashigaofa.client.ApiClient;
/**
 * 货币交易记录实体，用于记录用户的货币交易详情。
 */
@JsonPropertyOrder({
  CurrencyTransaction.JSON_PROPERTY_ID,
  CurrencyTransaction.JSON_PROPERTY_FROM_USER_I_D,
  CurrencyTransaction.JSON_PROPERTY_USER_I_D,
  CurrencyTransaction.JSON_PROPERTY_TRANSACTION_TYPE,
  CurrencyTransaction.JSON_PROPERTY_CURRENCY_TYPE,
  CurrencyTransaction.JSON_PROPERTY_CURRENCY_CHANGE,
  CurrencyTransaction.JSON_PROPERTY_CURRENCY_BALANCE,
  CurrencyTransaction.JSON_PROPERTY_DESCRIPTION,
  CurrencyTransaction.JSON_PROPERTY_STATUS,
  CurrencyTransaction.JSON_PROPERTY_REMARK,
  CurrencyTransaction.JSON_PROPERTY_TAGS,
  CurrencyTransaction.JSON_PROPERTY_CREATE_DATE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-18T07:36:52.198638406Z[Etc/UTC]", comments = "Generator version: 7.13.0-SNAPSHOT")
public class CurrencyTransaction {
  public static final String JSON_PROPERTY_ID = "id";
  @javax.annotation.Nullable
  private Long id;

  public static final String JSON_PROPERTY_FROM_USER_I_D = "fromUserID";
  @javax.annotation.Nullable
  private Long fromUserID;

  public static final String JSON_PROPERTY_USER_I_D = "userID";
  @javax.annotation.Nullable
  private Long userID;

  public static final String JSON_PROPERTY_TRANSACTION_TYPE = "transactionType";
  private JsonNullable<String> transactionType = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_CURRENCY_TYPE = "currencyType";
  private JsonNullable<String> currencyType = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_CURRENCY_CHANGE = "currencyChange";
  @javax.annotation.Nullable
  private Long currencyChange;

  public static final String JSON_PROPERTY_CURRENCY_BALANCE = "currencyBalance";
  @javax.annotation.Nullable
  private Double currencyBalance;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private JsonNullable<String> description = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_STATUS = "status";
  private JsonNullable<String> status = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_REMARK = "remark";
  private JsonNullable<String> remark = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_TAGS = "tags";
  private JsonNullable<String> tags = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_CREATE_DATE = "createDate";
  @javax.annotation.Nullable
  private OffsetDateTime createDate;

  public CurrencyTransaction() { 
  }

  public CurrencyTransaction id(@javax.annotation.Nullable Long id) {
    this.id = id;
    return this;
  }

  /**
   * 货币交易记录的唯一标识符。
   * @return id
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(@javax.annotation.Nullable Long id) {
    this.id = id;
  }


  public CurrencyTransaction fromUserID(@javax.annotation.Nullable Long fromUserID) {
    this.fromUserID = fromUserID;
    return this;
  }

  /**
   * 发起交易的发送方用户ID，若为转账交易时必填。
   * @return fromUserID
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FROM_USER_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getFromUserID() {
    return fromUserID;
  }


  @JsonProperty(JSON_PROPERTY_FROM_USER_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFromUserID(@javax.annotation.Nullable Long fromUserID) {
    this.fromUserID = fromUserID;
  }


  public CurrencyTransaction userID(@javax.annotation.Nullable Long userID) {
    this.userID = userID;
    return this;
  }

  /**
   * 进行货币交易的用户ID。
   * @return userID
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getUserID() {
    return userID;
  }


  @JsonProperty(JSON_PROPERTY_USER_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserID(@javax.annotation.Nullable Long userID) {
    this.userID = userID;
  }


  public CurrencyTransaction transactionType(@javax.annotation.Nullable String transactionType) {
    this.transactionType = JsonNullable.<String>of(transactionType);
    return this;
  }

  /**
   * 货币交易的类型，例如 &#39;消费&#39;, &#39;奖励&#39;, &#39;兑换&#39;, &#39;转账&#39; 等。
   * @return transactionType
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getTransactionType() {
        return transactionType.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TRANSACTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getTransactionType_JsonNullable() {
    return transactionType;
  }
  
  @JsonProperty(JSON_PROPERTY_TRANSACTION_TYPE)
  public void setTransactionType_JsonNullable(JsonNullable<String> transactionType) {
    this.transactionType = transactionType;
  }

  public void setTransactionType(@javax.annotation.Nullable String transactionType) {
    this.transactionType = JsonNullable.<String>of(transactionType);
  }


  public CurrencyTransaction currencyType(@javax.annotation.Nullable String currencyType) {
    this.currencyType = JsonNullable.<String>of(currencyType);
    return this;
  }

  /**
   * 交易的货币类型，例如 &#39;USD&#39;, &#39;CNY&#39; 等。
   * @return currencyType
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getCurrencyType() {
        return currencyType.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CURRENCY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getCurrencyType_JsonNullable() {
    return currencyType;
  }
  
  @JsonProperty(JSON_PROPERTY_CURRENCY_TYPE)
  public void setCurrencyType_JsonNullable(JsonNullable<String> currencyType) {
    this.currencyType = currencyType;
  }

  public void setCurrencyType(@javax.annotation.Nullable String currencyType) {
    this.currencyType = JsonNullable.<String>of(currencyType);
  }


  public CurrencyTransaction currencyChange(@javax.annotation.Nullable Long currencyChange) {
    this.currencyChange = currencyChange;
    return this;
  }

  /**
   * 货币的变动数量，正数表示增加，负数表示减少。
   * @return currencyChange
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CURRENCY_CHANGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getCurrencyChange() {
    return currencyChange;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCY_CHANGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrencyChange(@javax.annotation.Nullable Long currencyChange) {
    this.currencyChange = currencyChange;
  }


  public CurrencyTransaction currencyBalance(@javax.annotation.Nullable Double currencyBalance) {
    this.currencyBalance = currencyBalance;
    return this;
  }

  /**
   * 交易完成后的货币余额。
   * @return currencyBalance
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CURRENCY_BALANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Double getCurrencyBalance() {
    return currencyBalance;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCY_BALANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrencyBalance(@javax.annotation.Nullable Double currencyBalance) {
    this.currencyBalance = currencyBalance;
  }


  public CurrencyTransaction description(@javax.annotation.Nullable String description) {
    this.description = JsonNullable.<String>of(description);
    return this;
  }

  /**
   * 描述货币变动的具体原因或相关交易详情。
   * @return description
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getDescription() {
        return description.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getDescription_JsonNullable() {
    return description;
  }
  
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  public void setDescription_JsonNullable(JsonNullable<String> description) {
    this.description = description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = JsonNullable.<String>of(description);
  }


  public CurrencyTransaction status(@javax.annotation.Nullable String status) {
    this.status = JsonNullable.<String>of(status);
    return this;
  }

  /**
   * 货币交易的当前状态，例如 &#39;成功&#39;, &#39;失败&#39;, &#39;待审核&#39; 等。
   * @return status
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getStatus() {
        return status.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getStatus_JsonNullable() {
    return status;
  }
  
  @JsonProperty(JSON_PROPERTY_STATUS)
  public void setStatus_JsonNullable(JsonNullable<String> status) {
    this.status = status;
  }

  public void setStatus(@javax.annotation.Nullable String status) {
    this.status = JsonNullable.<String>of(status);
  }


  public CurrencyTransaction remark(@javax.annotation.Nullable String remark) {
    this.remark = JsonNullable.<String>of(remark);
    return this;
  }

  /**
   * 交易的额外信息或管理员的备注。
   * @return remark
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getRemark() {
        return remark.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_REMARK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getRemark_JsonNullable() {
    return remark;
  }
  
  @JsonProperty(JSON_PROPERTY_REMARK)
  public void setRemark_JsonNullable(JsonNullable<String> remark) {
    this.remark = remark;
  }

  public void setRemark(@javax.annotation.Nullable String remark) {
    this.remark = JsonNullable.<String>of(remark);
  }


  public CurrencyTransaction tags(@javax.annotation.Nullable String tags) {
    this.tags = JsonNullable.<String>of(tags);
    return this;
  }

  /**
   * 用于分类或标记交易的标签。
   * @return tags
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getTags() {
        return tags.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TAGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getTags_JsonNullable() {
    return tags;
  }
  
  @JsonProperty(JSON_PROPERTY_TAGS)
  public void setTags_JsonNullable(JsonNullable<String> tags) {
    this.tags = tags;
  }

  public void setTags(@javax.annotation.Nullable String tags) {
    this.tags = JsonNullable.<String>of(tags);
  }


  public CurrencyTransaction createDate(@javax.annotation.Nullable OffsetDateTime createDate) {
    this.createDate = createDate;
    return this;
  }

  /**
   * 货币交易发生的时间，默认为当前时间。
   * @return createDate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public OffsetDateTime getCreateDate() {
    return createDate;
  }


  @JsonProperty(JSON_PROPERTY_CREATE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreateDate(@javax.annotation.Nullable OffsetDateTime createDate) {
    this.createDate = createDate;
  }


  /**
   * Return true if this CurrencyTransaction object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CurrencyTransaction currencyTransaction = (CurrencyTransaction) o;
    return Objects.equals(this.id, currencyTransaction.id) &&
        Objects.equals(this.fromUserID, currencyTransaction.fromUserID) &&
        Objects.equals(this.userID, currencyTransaction.userID) &&
        equalsNullable(this.transactionType, currencyTransaction.transactionType) &&
        equalsNullable(this.currencyType, currencyTransaction.currencyType) &&
        Objects.equals(this.currencyChange, currencyTransaction.currencyChange) &&
        Objects.equals(this.currencyBalance, currencyTransaction.currencyBalance) &&
        equalsNullable(this.description, currencyTransaction.description) &&
        equalsNullable(this.status, currencyTransaction.status) &&
        equalsNullable(this.remark, currencyTransaction.remark) &&
        equalsNullable(this.tags, currencyTransaction.tags) &&
        Objects.equals(this.createDate, currencyTransaction.createDate);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, fromUserID, userID, hashCodeNullable(transactionType), hashCodeNullable(currencyType), currencyChange, currencyBalance, hashCodeNullable(description), hashCodeNullable(status), hashCodeNullable(remark), hashCodeNullable(tags), createDate);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CurrencyTransaction {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    fromUserID: ").append(toIndentedString(fromUserID)).append("\n");
    sb.append("    userID: ").append(toIndentedString(userID)).append("\n");
    sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
    sb.append("    currencyType: ").append(toIndentedString(currencyType)).append("\n");
    sb.append("    currencyChange: ").append(toIndentedString(currencyChange)).append("\n");
    sb.append("    currencyBalance: ").append(toIndentedString(currencyBalance)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    remark: ").append(toIndentedString(remark)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    createDate: ").append(toIndentedString(createDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sid%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getId()))));
    }

    // add `fromUserID` to the URL query string
    if (getFromUserID() != null) {
      joiner.add(String.format("%sfromUserID%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getFromUserID()))));
    }

    // add `userID` to the URL query string
    if (getUserID() != null) {
      joiner.add(String.format("%suserID%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getUserID()))));
    }

    // add `transactionType` to the URL query string
    if (getTransactionType() != null) {
      joiner.add(String.format("%stransactionType%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTransactionType()))));
    }

    // add `currencyType` to the URL query string
    if (getCurrencyType() != null) {
      joiner.add(String.format("%scurrencyType%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getCurrencyType()))));
    }

    // add `currencyChange` to the URL query string
    if (getCurrencyChange() != null) {
      joiner.add(String.format("%scurrencyChange%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getCurrencyChange()))));
    }

    // add `currencyBalance` to the URL query string
    if (getCurrencyBalance() != null) {
      joiner.add(String.format("%scurrencyBalance%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getCurrencyBalance()))));
    }

    // add `description` to the URL query string
    if (getDescription() != null) {
      joiner.add(String.format("%sdescription%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getDescription()))));
    }

    // add `status` to the URL query string
    if (getStatus() != null) {
      joiner.add(String.format("%sstatus%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getStatus()))));
    }

    // add `remark` to the URL query string
    if (getRemark() != null) {
      joiner.add(String.format("%sremark%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getRemark()))));
    }

    // add `tags` to the URL query string
    if (getTags() != null) {
      joiner.add(String.format("%stags%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getTags()))));
    }

    // add `createDate` to the URL query string
    if (getCreateDate() != null) {
      joiner.add(String.format("%screateDate%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getCreateDate()))));
    }

    return joiner.toString();
  }
}

