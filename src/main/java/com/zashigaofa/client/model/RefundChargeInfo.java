/*
 * 用户全部 API 文档
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.zashigaofa.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.zashigaofa.client.model.RefundSubFee;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.zashigaofa.client.ApiClient;
/**
 * RefundChargeInfo
 */
@JsonPropertyOrder({
  RefundChargeInfo.JSON_PROPERTY_CHARGE_TYPE,
  RefundChargeInfo.JSON_PROPERTY_REFUND_CHARGE_FEE,
  RefundChargeInfo.JSON_PROPERTY_REFUND_SUB_FEE_DETAIL_LIST,
  RefundChargeInfo.JSON_PROPERTY_SWITCH_FEE_RATE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-18T07:36:52.198638406Z[Etc/UTC]", comments = "Generator version: 7.13.0-SNAPSHOT")
public class RefundChargeInfo {
  public static final String JSON_PROPERTY_CHARGE_TYPE = "chargeType";
  private JsonNullable<String> chargeType = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_REFUND_CHARGE_FEE = "refundChargeFee";
  private JsonNullable<String> refundChargeFee = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_REFUND_SUB_FEE_DETAIL_LIST = "refundSubFeeDetailList";
  private JsonNullable<List<RefundSubFee>> refundSubFeeDetailList = JsonNullable.<List<RefundSubFee>>undefined();

  public static final String JSON_PROPERTY_SWITCH_FEE_RATE = "switchFeeRate";
  private JsonNullable<String> switchFeeRate = JsonNullable.<String>undefined();

  public RefundChargeInfo() { 
  }

  public RefundChargeInfo chargeType(@javax.annotation.Nullable String chargeType) {
    this.chargeType = JsonNullable.<String>of(chargeType);
    return this;
  }

  /**
   * Get chargeType
   * @return chargeType
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getChargeType() {
        return chargeType.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CHARGE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getChargeType_JsonNullable() {
    return chargeType;
  }
  
  @JsonProperty(JSON_PROPERTY_CHARGE_TYPE)
  public void setChargeType_JsonNullable(JsonNullable<String> chargeType) {
    this.chargeType = chargeType;
  }

  public void setChargeType(@javax.annotation.Nullable String chargeType) {
    this.chargeType = JsonNullable.<String>of(chargeType);
  }


  public RefundChargeInfo refundChargeFee(@javax.annotation.Nullable String refundChargeFee) {
    this.refundChargeFee = JsonNullable.<String>of(refundChargeFee);
    return this;
  }

  /**
   * Get refundChargeFee
   * @return refundChargeFee
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getRefundChargeFee() {
        return refundChargeFee.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_REFUND_CHARGE_FEE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getRefundChargeFee_JsonNullable() {
    return refundChargeFee;
  }
  
  @JsonProperty(JSON_PROPERTY_REFUND_CHARGE_FEE)
  public void setRefundChargeFee_JsonNullable(JsonNullable<String> refundChargeFee) {
    this.refundChargeFee = refundChargeFee;
  }

  public void setRefundChargeFee(@javax.annotation.Nullable String refundChargeFee) {
    this.refundChargeFee = JsonNullable.<String>of(refundChargeFee);
  }


  public RefundChargeInfo refundSubFeeDetailList(@javax.annotation.Nullable List<RefundSubFee> refundSubFeeDetailList) {
    this.refundSubFeeDetailList = JsonNullable.<List<RefundSubFee>>of(refundSubFeeDetailList);
    return this;
  }

  public RefundChargeInfo addRefundSubFeeDetailListItem(RefundSubFee refundSubFeeDetailListItem) {
    if (this.refundSubFeeDetailList == null || !this.refundSubFeeDetailList.isPresent()) {
      this.refundSubFeeDetailList = JsonNullable.<List<RefundSubFee>>of(new ArrayList<>());
    }
    try {
      this.refundSubFeeDetailList.get().add(refundSubFeeDetailListItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Get refundSubFeeDetailList
   * @return refundSubFeeDetailList
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public List<RefundSubFee> getRefundSubFeeDetailList() {
        return refundSubFeeDetailList.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_REFUND_SUB_FEE_DETAIL_LIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<RefundSubFee>> getRefundSubFeeDetailList_JsonNullable() {
    return refundSubFeeDetailList;
  }
  
  @JsonProperty(JSON_PROPERTY_REFUND_SUB_FEE_DETAIL_LIST)
  public void setRefundSubFeeDetailList_JsonNullable(JsonNullable<List<RefundSubFee>> refundSubFeeDetailList) {
    this.refundSubFeeDetailList = refundSubFeeDetailList;
  }

  public void setRefundSubFeeDetailList(@javax.annotation.Nullable List<RefundSubFee> refundSubFeeDetailList) {
    this.refundSubFeeDetailList = JsonNullable.<List<RefundSubFee>>of(refundSubFeeDetailList);
  }


  public RefundChargeInfo switchFeeRate(@javax.annotation.Nullable String switchFeeRate) {
    this.switchFeeRate = JsonNullable.<String>of(switchFeeRate);
    return this;
  }

  /**
   * Get switchFeeRate
   * @return switchFeeRate
   */
  @javax.annotation.Nullable
  @JsonIgnore
  public String getSwitchFeeRate() {
        return switchFeeRate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SWITCH_FEE_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getSwitchFeeRate_JsonNullable() {
    return switchFeeRate;
  }
  
  @JsonProperty(JSON_PROPERTY_SWITCH_FEE_RATE)
  public void setSwitchFeeRate_JsonNullable(JsonNullable<String> switchFeeRate) {
    this.switchFeeRate = switchFeeRate;
  }

  public void setSwitchFeeRate(@javax.annotation.Nullable String switchFeeRate) {
    this.switchFeeRate = JsonNullable.<String>of(switchFeeRate);
  }


  /**
   * Return true if this RefundChargeInfo object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RefundChargeInfo refundChargeInfo = (RefundChargeInfo) o;
    return equalsNullable(this.chargeType, refundChargeInfo.chargeType) &&
        equalsNullable(this.refundChargeFee, refundChargeInfo.refundChargeFee) &&
        equalsNullable(this.refundSubFeeDetailList, refundChargeInfo.refundSubFeeDetailList) &&
        equalsNullable(this.switchFeeRate, refundChargeInfo.switchFeeRate);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(chargeType), hashCodeNullable(refundChargeFee), hashCodeNullable(refundSubFeeDetailList), hashCodeNullable(switchFeeRate));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RefundChargeInfo {\n");
    sb.append("    chargeType: ").append(toIndentedString(chargeType)).append("\n");
    sb.append("    refundChargeFee: ").append(toIndentedString(refundChargeFee)).append("\n");
    sb.append("    refundSubFeeDetailList: ").append(toIndentedString(refundSubFeeDetailList)).append("\n");
    sb.append("    switchFeeRate: ").append(toIndentedString(switchFeeRate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `chargeType` to the URL query string
    if (getChargeType() != null) {
      joiner.add(String.format("%schargeType%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getChargeType()))));
    }

    // add `refundChargeFee` to the URL query string
    if (getRefundChargeFee() != null) {
      joiner.add(String.format("%srefundChargeFee%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getRefundChargeFee()))));
    }

    // add `refundSubFeeDetailList` to the URL query string
    if (getRefundSubFeeDetailList() != null) {
      for (int i = 0; i < getRefundSubFeeDetailList().size(); i++) {
        if (getRefundSubFeeDetailList().get(i) != null) {
          joiner.add(getRefundSubFeeDetailList().get(i).toUrlQueryString(String.format("%srefundSubFeeDetailList%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `switchFeeRate` to the URL query string
    if (getSwitchFeeRate() != null) {
      joiner.add(String.format("%sswitchFeeRate%s=%s", prefix, suffix, ApiClient.urlEncode(ApiClient.valueToString(getSwitchFeeRate()))));
    }

    return joiner.toString();
  }
}

